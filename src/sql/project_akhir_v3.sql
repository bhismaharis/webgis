-- ========================================
-- SISTEM ANALISIS SPASIAL PENGELOLAAN SAMPAH
-- Database Schema Terfokus untuk Analisis TPS
-- ========================================

DROP SCHEMA IF EXISTS sampah CASCADE;
CREATE SCHEMA IF NOT EXISTS sampah AUTHORIZATION postgres;

-- ========================================
-- DEFINISI ENUM TYPES
-- ========================================

CREATE TYPE sampah.status_tps AS ENUM ('AKTIF', 'PENUH', 'TIDAK_AKTIF');
CREATE TYPE sampah.status_lahan AS ENUM ('KOSONG', 'TERPAKAI', 'TIDAK_LAYAK');
CREATE TYPE sampah.tipe_jalan AS ENUM ('primary', 'secondary', 'tertiary', 'trunk', 'unclassified', 'residential');
CREATE TYPE sampah.golongan_tps AS ENUM ('TIPE_I', 'TIPE_II', 'TIPE_III');
CREATE TYPE sampah.status_rekomendasi AS ENUM ('SANGAT DIREKOMENDASIKAN', 'DIREKOMENDASIKA', 'TIDAK DIREKOMENDASIKAN');

-- ========================================
-- STRUKTUR TABEL DATABASE
-- ========================================

-- Tabel Kecamatan
CREATE TABLE sampah.kecamatan (
    id SERIAL PRIMARY KEY,
    nama varchar(50) NOT NULL,
    luas_wilayah decimal GENERATED ALWAYS AS (
        ST_Area(geom::geography)  
    ) STORED,
    geom geometry(POLYGON, 4326) NOT NULL
);

-- Tabel Kelurahan
CREATE TABLE sampah.kelurahan (
    id SERIAL PRIMARY KEY,
    kecamatan_id integer NOT NULL,
    nama varchar(50) NOT NULL,
    luas decimal GENERATED ALWAYS AS (
        ST_Area(geom::geography)  
    ) STORED,
    jumlah_penduduk integer NOT NULL,
    kepadatan_penduduk decimal GENERATED ALWAYS AS (
        jumlah_penduduk::decimal / ST_Area(geom::geography)
    ) STORED,
    geom geometry(MULTIPOLYGON, 4326) NOT NULL,
    FOREIGN KEY (kecamatan_id) REFERENCES sampah.kecamatan (id) ON DELETE CASCADE
);

-- Tabel TPS (Tempat Penampungan Sementara)
CREATE TABLE sampah.tps (
    id SERIAL PRIMARY KEY,
    kelurahan_id integer NOT NULL,
    nama varchar(100) NOT NULL,
    golongan sampah.golongan_tps DEFAULT 'TIPE_I',
    status sampah.status_tps DEFAULT 'AKTIF',
    
    -- Spesifikasi berdasarkan golongan
    kapasitas_jiwa integer NOT NULL, -- Jumlah jiwa yang dilayani
    luas_area decimal GENERATED ALWAYS AS (
        ST_Area(geom::geography)  
    ) STORED,
    kapasitas_volume decimal NOT NULL, -- Kapasitas volume dalam m³
    volume_terpakai decimal NOT NULL DEFAULT 0, -- Volume dalam m³
    
    -- Area layanan dan efisiensi
    tingkat_pemanfaatan decimal GENERATED ALWAYS AS (
        CASE 
            WHEN kapasitas_volume > 0 THEN (volume_terpakai / kapasitas_volume) * 100
            ELSE 0 
        END
    ) STORED,
    
    geom geometry(MULTIPOLYGON, 4326) NOT NULL,
    
    FOREIGN KEY (kelurahan_id) REFERENCES sampah.kelurahan (id) ON DELETE CASCADE,
    
    -- Constraint berdasarkan golongan TPS 
    CONSTRAINT chk_volume_capacity CHECK (volume_terpakai <= kapasitas_volume),
    CONSTRAINT chk_tipe_i_spec CHECK (
        golongan != 'TIPE_I' OR 
        (kapasitas_jiwa <= 2500 AND luas_area BETWEEN 10 AND 50 AND kapasitas_volume <= 100)
    ),
    CONSTRAINT chk_tipe_ii_spec CHECK (
        golongan != 'TIPE_II' OR 
        (kapasitas_jiwa <= 30000 AND luas_area BETWEEN 60 AND 200 AND kapasitas_volume <= 300)
    ),
    CONSTRAINT chk_tipe_iii_spec CHECK (
        golongan != 'TIPE_III' OR 
        (kapasitas_jiwa <= 120000 AND luas_area >= 200 AND kapasitas_volume <= 1000)
    )
);

-- Tabel TPA (Tempat Pemrosesan Akhir)
CREATE TABLE sampah.tpa (
    id SERIAL PRIMARY KEY,
    nama varchar(100) NOT NULL,
    geom geometry(MULTIPOLYGON, 4326) NOT NULL
);

-- Tabel Jalan - Fokus pada routing saja
CREATE TABLE sampah.jalan (
    id SERIAL PRIMARY KEY,
    nama varchar(100),
    tipe sampah.tipe_jalan DEFAULT 'unclassified',
    panjang decimal GENERATED ALWAYS AS (
        ST_Length(geom::geography)  -- Panjang dalam meter
    ) STORED,
    geom geometry(LINESTRING, 4326) NOT NULL
);

-- Tabel Lahan Potensial - Data lahan kosong yang tersedia
CREATE TABLE sampah.lahan_potensial (
    id SERIAL PRIMARY KEY,
    kelurahan_id integer NOT NULL,
    luas decimal GENERATED ALWAYS AS (
        ST_Area(geom::geography)  
    ) STORED,
    status sampah.status_lahan DEFAULT 'KOSONG',
    geom geometry(MULTIPOLYGON, 4326) NOT NULL,
    
    FOREIGN KEY (kelurahan_id) REFERENCES sampah.kelurahan (id) ON DELETE CASCADE
);

-- Tabel Rekomendasi TPS - Hasil analisis dari lahan potensial
CREATE TABLE sampah.rekomendasi_tps (
    id SERIAL PRIMARY KEY,
    lahan_potensial_id integer NOT NULL,
    kelurahan_id integer NOT NULL,
    
    -- Hasil analisis kelayakan
    jarak_ke_jalan decimal NOT NULL, -- Jarak ke jalan terdekat (m)
    jarak_ke_pemukiman decimal NOT NULL, -- Jarak ke pemukiman terdekat (m)
    jarak_ke_tps_terdekat decimal, -- Jarak ke TPS terdekat (m)
    
    -- Rekomendasi berdasarkan analisis
    golongan_rekomendasi sampah.golongan_tps NOT NULL, -- Golongan TPS yang direkomendasikan
    estimasi_jiwa_terlayani integer NOT NULL, -- Estimasi jumlah jiwa yang bisa dilayani
    estimasi_kapasitas_volume decimal NOT NULL, -- Estimasi kapasitas volume yang dibutuhkan
    estimasi_luas_area decimal NOT NULL, -- Estimasi luas area TPS yang dibutuhkan
    
    -- Scoring dan ranking
    skor_kelayakan decimal NOT NULL DEFAULT 0, -- Skor kelayakan (0-100)
    ranking integer, -- Ranking dalam area/kelurahan
    
    -- Status rekomendasi
    status_rekomendasi sampah.status_rekomendasi DEFAULT 'SANGAT DIREKOMENDASIKAN',
    
    geom geometry(POINT, 4326) NOT NULL,
    
    FOREIGN KEY (lahan_potensial_id) REFERENCES sampah.lahan_potensial (id) ON DELETE CASCADE,
    FOREIGN KEY (kelurahan_id) REFERENCES sampah.kelurahan (id) ON DELETE CASCADE,
    
    -- Constraint berdasarkan golongan rekomendasi
    CONSTRAINT chk_rekomendasi_tipe_i CHECK (
        golongan_rekomendasi != 'TIPE_I' OR 
        (estimasi_jiwa_terlayani <= 2500 AND estimasi_luas_area BETWEEN 10 AND 50 AND estimasi_kapasitas_volume <= 100)
    ),
    CONSTRAINT chk_rekomendasi_tipe_ii CHECK (
        golongan_rekomendasi != 'TIPE_II' OR 
        (estimasi_jiwa_terlayani <= 30000 AND estimasi_luas_area BETWEEN 60 AND 200 AND estimasi_kapasitas_volume <= 300)
    ),
    CONSTRAINT chk_rekomendasi_tipe_iii CHECK (
        golongan_rekomendasi != 'TIPE_III' OR 
        (estimasi_jiwa_terlayani <= 120000 AND estimasi_luas_area >= 200 AND estimasi_kapasitas_volume <= 1000)
    )
);

-- Tabel Rute Angkut
CREATE TABLE sampah.rute_angkut (
    id SERIAL PRIMARY KEY,
    tps_id integer NOT NULL,
    tpa_id integer NOT NULL,
    
    -- Karakteristik rute
    jarak_tempuh decimal NOT NULL, -- Jarak dalam km
    waktu_tempuh interval, -- Estimasi waktu tempuh
    urutan_rute integer[], -- Array urutan jalan yang dilalui
    
    geom geometry(MULTILINESTRING, 4326) NOT NULL,
    
    FOREIGN KEY (tps_id) REFERENCES sampah.tps (id) ON DELETE CASCADE,
    FOREIGN KEY (tpa_id) REFERENCES sampah.tpa (id) ON DELETE CASCADE
);

-- Tabel Detail Rute
CREATE TABLE sampah.detail_rute (
    id SERIAL PRIMARY KEY,
    rute_angkut_id integer NOT NULL,
    jalan_id integer NOT NULL,
    urutan integer NOT NULL,
    jarak decimal NOT NULL, -- Jarak segmen dalam meter
    tipe_jalan sampah.tipe_jalan, -- Tipe jalan yang dilalui
    
    FOREIGN KEY (rute_angkut_id) REFERENCES sampah.rute_angkut (id) ON DELETE CASCADE,
    FOREIGN KEY (jalan_id) REFERENCES sampah.jalan (id) ON DELETE CASCADE,
    UNIQUE(rute_angkut_id, urutan),
    UNIQUE(rute_angkut_id, jalan_id)
);

-- ========================================
-- ISI DATA 
-- ========================================

-- Data Kecamatan
INSERT INTO 
    sampah.kecamatan (nama, geom) 
VALUES
    ('KALIWATES', ST_GeomFromText('Polygon ((113.70971287 -8.1956359, 113.71028582 -8.19566556, 113.71055799 -8.19568456, 113.71101617 -8.19571653, 113.71166789 -8.19576805, 113.71232893 -8.19576985, 113.71227795 -8.19636951, 113.71217058 -8.19651316, 113.71217736 -8.1971353, 113.71221113 -8.19835598, 113.71223094 -8.19899026, 113.71224071 -8.19930266, 113.7122764 -8.19998744, 113.71223122 -8.20069288, 113.71221147 -8.20122297, 113.71211058 -8.20172777, 113.71192191 -8.2019968, 113.711757 -8.20228969, 113.7115605 -8.20248666, 113.71141638 -8.20255202, 113.71104105 -8.20254029, 113.71062685 -8.20246999, 113.71005227 -8.20230463, 113.70956047 -8.20223484, 113.70923791 -8.20219806, 113.70894845 -8.20209138, 113.70869717 -8.20197891, 113.70850353 -8.20194458, 113.70829378 -8.20198352, 113.70791669 -8.20233017, 113.70779446 -8.20245338, 113.70741011 -8.20257662, 113.70716139 -8.20260831, 113.70691586 -8.20259095, 113.70670416 -8.20252266, 113.70648393 -8.20236431, 113.70633352 -8.20217423, 113.70619246 -8.20185647, 113.70616679 -8.20181247, 113.70598467 -8.20189411, 113.70539995 -8.20216462, 113.7048011 -8.20256472, 113.70431892 -8.20289184, 113.70407086 -8.20307004, 113.70367485 -8.20340711, 113.7034896 -8.20347997, 113.70323916 -8.20369221, 113.70280146 -8.204192, 113.70278222 -8.20420893, 113.70247458 -8.20439426, 113.70222271 -8.20447846, 113.70154095 -8.20445981, 113.70122481 -8.20447767, 113.70113446 -8.20453055, 113.70107664 -8.20456442, 113.70101102 -8.2046786, 113.7009718 -8.20477, 113.7007799 -8.20506128, 113.70058852 -8.20515338, 113.70005014 -8.20540367, 113.69967435 -8.20577874, 113.69948972 -8.20592348, 113.69937474 -8.2062368, 113.69933276 -8.20644405, 113.69927258 -8.20671419, 113.69926251 -8.20674028, 113.69911973 -8.20692368, 113.69875208 -8.2072324, 113.6983911 -8.20730441, 113.69758408 -8.20741507, 113.69748996 -8.20734864, 113.69712546 -8.20773535, 113.69665262 -8.20773436, 113.69535267 -8.2095702, 113.69492555 -8.21018441, 113.69407433 -8.20977345, 113.69397486 -8.20973009, 113.69379117 -8.21001948, 113.69339102 -8.21057421, 113.69299833 -8.21107612, 113.69266934 -8.21164721, 113.6923387 -8.21218354, 113.69209897 -8.21247943, 113.69200321 -8.21256298, 113.69190908 -8.21264511, 113.69163039 -8.21278755, 113.69076393 -8.21303322, 113.69022159 -8.21316108, 113.68926252 -8.21338826, 113.68875836 -8.21353098, 113.68834755 -8.21369561, 113.68792296 -8.21389412, 113.68766405 -8.21396007, 113.68739644 -8.21397067, 113.68732575 -8.21397891, 113.68729035 -8.21397929, 113.68720028 -8.21399132, 113.68605231 -8.21411208, 113.68530139 -8.21412154, 113.6847538 -8.21416863, 113.68456147 -8.21421245, 113.6844991 -8.21400844, 113.68447928 -8.21366085, 113.68447555 -8.21310454, 113.68447328 -8.21242917, 113.68448785 -8.21174939, 113.68461981 -8.21101066, 113.68476748 -8.21014686, 113.68486392 -8.20923444, 113.6850227 -8.20831432, 113.68554397 -8.20622252, 113.68553142 -8.20537271, 113.68550978 -8.20465964, 113.68552152 -8.20355335, 113.68552174 -8.20341743, 113.68524506 -8.20338664, 113.68521803 -8.20337963, 113.68418911 -8.20302853, 113.68385477 -8.20285857, 113.6836015 -8.20272596, 113.68318274 -8.20261893, 113.68291868 -8.20258579, 113.68272933 -8.20261616, 113.68267365 -8.20264639, 113.68230996 -8.20318521, 113.68212531 -8.20344461, 113.68188711 -8.20366595, 113.68141178 -8.20393887, 113.68119781 -8.20400167, 113.68096577 -8.20406978, 113.680641 -8.20415639, 113.68040457 -8.20426978, 113.68034203 -8.20430661, 113.68018555 -8.20441459, 113.68008896 -8.20448122, 113.67998794 -8.20451421, 113.67954391 -8.20446108, 113.67921866 -8.20454887, 113.67901596 -8.20460838, 113.67871663 -8.20460492, 113.67847071 -8.20453377, 113.67810986 -8.20429291, 113.67763469 -8.20391099, 113.67656209 -8.20345548, 113.67640281 -8.203382, 113.67629278 -8.20326729, 113.6762093 -8.20303356, 113.67620668 -8.20262665, 113.67621168 -8.20240942, 113.67617247 -8.20211785, 113.67599046 -8.20174738, 113.67577513 -8.20150632, 113.67548126 -8.20129413, 113.67486697 -8.20103142, 113.67453482 -8.20089721, 113.674318 -8.20076194, 113.674195 -8.20063192, 113.67437986 -8.19979154, 113.67445846 -8.19943967, 113.67426352 -8.19903336, 113.67387861 -8.19860422, 113.67344152 -8.19823889, 113.67297283 -8.19788878, 113.67253527 -8.19753181, 113.67235018 -8.1974183, 113.67188276 -8.19734442, 113.67147506 -8.19734984, 113.67129707 -8.19738276, 113.67091786 -8.19765963, 113.67063645 -8.19790284, 113.67043575 -8.19794426, 113.67032389 -8.1979333, 113.67000998 -8.1978903, 113.66974873 -8.19789152, 113.66925709 -8.19804255, 113.66896736 -8.19819789, 113.66875111 -8.19830214, 113.66831161 -8.19838496, 113.6676253 -8.19838083, 113.66725074 -8.19837803, 113.66695767 -8.19845522, 113.66688861 -8.19847811, 113.66669826 -8.19851479, 113.66661795 -8.19864222, 113.66644661 -8.19902406, 113.66625206 -8.19940604, 113.66602167 -8.19962676, 113.66575572 -8.19973233, 113.66548908 -8.1997341, 113.6651988 -8.1996668, 113.66480364 -8.19951943, 113.66452379 -8.19927904, 113.66429026 -8.19902679, 113.66399821 -8.19869416, 113.66375265 -8.19838432, 113.66362193 -8.19790064, 113.66354928 -8.1974397, 113.66349976 -8.19684242, 113.66341605 -8.19640864, 113.66326842 -8.1960879, 113.66304072 -8.19588028, 113.66276538 -8.19580168, 113.66242583 -8.19578782, 113.66211902 -8.1958381, 113.66178083 -8.1960334, 113.66154433 -8.19634139, 113.66142166 -8.1965328, 113.66128645 -8.19705006, 113.66112845 -8.19759801, 113.66069404 -8.1979065, 113.66025824 -8.1980059, 113.65970819 -8.19794518, 113.65936843 -8.19789918, 113.65912549 -8.19783643, 113.65886731 -8.19790248, 113.65873883 -8.19803201, 113.65862728 -8.19827403, 113.65850042 -8.19864485, 113.65840526 -8.19891893, 113.65821321 -8.19920974, 113.6578595 -8.19950162, 113.65752153 -8.19972906, 113.65703711 -8.19981267, 113.65655218 -8.19981587, 113.65617962 -8.19970573, 113.65577508 -8.19964405, 113.65537138 -8.19971106, 113.65504839 -8.19976145, 113.65485432 -8.19974663, 113.65470808 -8.19963499, 113.6546902 -8.19937774, 113.65472093 -8.19913625, 113.6548478 -8.19876546, 113.65511919 -8.1982489, 113.65540748 -8.19784487, 113.65543747 -8.19749076, 113.65537069 -8.19716951, 113.65517522 -8.19694559, 113.65496388 -8.19677004, 113.65470472 -8.19669131, 113.65443044 -8.19677353, 113.65422557 -8.19689147, 113.65384503 -8.19727516, 113.65344874 -8.19779155, 113.65325095 -8.19810775, 113.65300453 -8.19862313, 113.6527728 -8.19884011, 113.65264001 -8.19890729, 113.65250688 -8.19892474, 113.65232345 -8.19889279, 113.65220632 -8.19881071, 113.65200458 -8.19853029, 113.65181831 -8.19806743, 113.65163171 -8.19755491, 113.65149729 -8.19737347, 113.65131373 -8.19732497, 113.65111385 -8.19732629, 113.65089822 -8.19746027, 113.65079963 -8.19765982, 113.65071887 -8.19804153, 113.6507225 -8.19858843, 113.6508082 -8.19895249, 113.65094363 -8.19928306, 113.65119675 -8.1997786, 113.65134872 -8.20009249, 113.6514342 -8.2004234, 113.65138568 -8.20063916, 113.65122066 -8.2008723, 113.6507352 -8.20125914, 113.65054143 -8.20142368, 113.6501325 -8.20184679, 113.64978352 -8.20236155, 113.6495015 -8.20275453, 113.64927308 -8.20305272, 113.64904384 -8.20322954, 113.64885447 -8.20328472, 113.64865109 -8.20327257, 113.64843353 -8.20316612, 113.64829728 -8.20305913, 113.64811976 -8.20285801, 113.64795579 -8.20265678, 113.64775028 -8.20232097, 113.64754564 -8.20212004, 113.64726024 -8.20200053, 113.6470705 -8.20200179, 113.64680035 -8.20213841, 113.64642255 -8.20239713, 113.64617995 -8.20260102, 113.6460176 -8.20264255, 113.645882 -8.20262994, 113.64575974 -8.2025903, 113.64555546 -8.20244329, 113.6452829 -8.20221582, 113.64496877 -8.20185375, 113.64473686 -8.201626, 113.64447847 -8.20149283, 113.64431575 -8.20148044, 113.64407252 -8.20158991, 113.64391077 -8.20172583, 113.64360226 -8.20221336, 113.64321352 -8.20286327, 113.64282547 -8.2035185, 113.64260916 -8.20394612, 113.64209678 -8.20479195, 113.64181028 -8.20515066, 113.64157253 -8.20535045, 113.64125446 -8.20545165, 113.64084635 -8.20549397, 113.64047774 -8.20548649, 113.64035781 -8.2054278, 113.64023725 -8.20527001, 113.64003614 -8.20498389, 113.63982429 -8.20480049, 113.639674 -8.20478845, 113.63967325 -8.20469421, 113.63971671 -8.20424117, 113.63970083 -8.2041704, 113.63972077 -8.20374947, 113.63971847 -8.2036073, 113.63968335 -8.20345644, 113.63975572 -8.20317577, 113.63980532 -8.2029833, 113.63984426 -8.20280638, 113.63978819 -8.20264942, 113.63971097 -8.20249684, 113.63975467 -8.20225862, 113.63982506 -8.20189431, 113.63987433 -8.20167177, 113.63960914 -8.20116489, 113.63954308 -8.20103119, 113.63960025 -8.20046551, 113.63965133 -8.20018236, 113.63983961 -8.20007799, 113.63999022 -8.20001815, 113.6401195 -8.19989535, 113.64020616 -8.19968986, 113.64020403 -8.1994178, 113.64035515 -8.19909275, 113.64048779 -8.19886289, 113.64055375 -8.19858455, 113.6405693 -8.19842578, 113.64076886 -8.19811277, 113.64116708 -8.1981305, 113.641314 -8.19812806, 113.64143338 -8.19805793, 113.64153363 -8.19794602, 113.64160836 -8.19760113, 113.64172996 -8.19729048, 113.64181708 -8.19707069, 113.64183507 -8.19692816, 113.64199705 -8.19667354, 113.64227146 -8.19635325, 113.64238315 -8.19617376, 113.64245292 -8.19581856, 113.64248713 -8.19558176, 113.64256702 -8.19541281, 113.64271382 -8.19526608, 113.64313319 -8.19524041, 113.64327761 -8.19522936, 113.64353603 -8.19506896, 113.64381121 -8.19477338, 113.64401022 -8.19434652, 113.64411941 -8.19412666, 113.64423449 -8.19399177, 113.64445314 -8.19398816, 113.64456843 -8.19399349, 113.64467648 -8.19393511, 113.64472881 -8.19385495, 113.6445857 -8.19350424, 113.64450852 -8.19335135, 113.64451329 -8.19323746, 113.64453142 -8.19280165, 113.64449618 -8.19257446, 113.64445899 -8.1923347, 113.64443126 -8.19220822, 113.64441581 -8.1921378, 113.64435203 -8.19214514, 113.64410653 -8.1921303, 113.64381534 -8.1919651, 113.64326915 -8.19153642, 113.64242758 -8.19073544, 113.642111 -8.19043411, 113.64186516 -8.19011577, 113.64165486 -8.18972086, 113.64137651 -8.1890901, 113.641333 -8.18874615, 113.6413568 -8.18860129, 113.64136671 -8.18854092, 113.64138647 -8.18849672, 113.64149443 -8.18825492, 113.64174525 -8.18792005, 113.64191178 -8.18763731, 113.6419343 -8.18759186, 113.64210182 -8.18736139, 113.64230284 -8.18718501, 113.64242441 -8.18707833, 113.64287068 -8.18674675, 113.64303492 -8.1866247, 113.64311719 -8.1864681, 113.64307378 -8.18636818, 113.64295773 -8.18624003, 113.64283313 -8.18614716, 113.64275078 -8.18610431, 113.64269324 -8.18606824, 113.64233499 -8.18584474, 113.64187838 -8.18538347, 113.64183317 -8.18529197, 113.64174829 -8.18512032, 113.64172055 -8.18493456, 113.64175426 -8.18469827, 113.64184172 -8.18447259, 113.64200114 -8.18420122, 113.64209497 -8.18393606, 113.64203678 -8.18365483, 113.64194967 -8.18310899, 113.64179591 -8.1820143, 113.64175748 -8.18184091, 113.64178606 -8.18157745, 113.64198316 -8.18143743, 113.64229409 -8.18136132, 113.64301068 -8.18149974, 113.64438577 -8.18195877, 113.64577977 -8.18242357, 113.64591811 -8.18248199, 113.6475245 -8.18316036, 113.64897814 -8.18376078, 113.6502678 -8.18428269, 113.65031142 -8.18430184, 113.65094186 -8.18449844, 113.65152107 -8.18464643, 113.65206824 -8.18450846, 113.65241083 -8.18437038, 113.65248325 -8.18411431, 113.65275204 -8.18336082, 113.65286192 -8.18305269, 113.65295344 -8.18256922, 113.65303466 -8.18216905, 113.6530695 -8.18209248, 113.65316027 -8.18193232, 113.65328556 -8.18178193, 113.65339655 -8.18164878, 113.65367804 -8.18145365, 113.65423427 -8.18119485, 113.65447036 -8.18101988, 113.65456889 -8.1808316, 113.6546223 -8.18051191, 113.65473413 -8.17936094, 113.65474271 -8.17897889, 113.65483621 -8.17859446, 113.65508141 -8.17788891, 113.65522137 -8.17777778, 113.65559875 -8.17757246, 113.65582015 -8.17752604, 113.65639534 -8.17750003, 113.65652706 -8.17741032, 113.65685557 -8.17743066, 113.65781507 -8.17751199, 113.65804715 -8.17749736, 113.65845846 -8.17747141, 113.65944434 -8.1773664, 113.65981557 -8.17729263, 113.6605525 -8.17714619, 113.66172749 -8.17684334, 113.66283702 -8.17642363, 113.66348321 -8.17643219, 113.66383203 -8.1764368, 113.66392026 -8.17640211, 113.66420381 -8.17629062, 113.66451458 -8.17595269, 113.6648133 -8.17576811, 113.66507528 -8.17560245, 113.66568708 -8.17529458, 113.66665724 -8.17505904, 113.66786024 -8.17498779, 113.66852573 -8.17497613, 113.66927281 -8.17482704, 113.67014276 -8.17458768, 113.67073714 -8.17433635, 113.67077893 -8.17429263, 113.67096894 -8.17409384, 113.67105872 -8.17367403, 113.67101697 -8.1733528, 113.67089382 -8.17310922, 113.67089906 -8.17303317, 113.67043378 -8.17264692, 113.67037652 -8.17243158, 113.6702736 -8.17199434, 113.67013303 -8.1716721, 113.67002077 -8.17138022, 113.67002224 -8.17114866, 113.67011913 -8.17059408, 113.67021758 -8.16977802, 113.67020625 -8.1693784, 113.67013127 -8.16903094, 113.66990891 -8.16818077, 113.66964938 -8.16695648, 113.66956722 -8.16659588, 113.66963588 -8.16635627, 113.66967485 -8.16627186, 113.66982947 -8.16593684, 113.6701508 -8.16528074, 113.67023755 -8.16510359, 113.67026333 -8.16481271, 113.67021108 -8.16452666, 113.67013048 -8.16398897, 113.67007258 -8.16373047, 113.66994271 -8.16353508, 113.66973047 -8.16322728, 113.66987379 -8.16281565, 113.66986916 -8.16256996, 113.66981067 -8.16239094, 113.66968589 -8.16225629, 113.66944764 -8.16197839, 113.66943892 -8.1617985, 113.66948785 -8.16140372, 113.66959906 -8.16107014, 113.66972269 -8.16086706, 113.66977985 -8.16077312, 113.67005969 -8.16045684, 113.67019477 -8.16041167, 113.67035503 -8.16040189, 113.67048247 -8.16039414, 113.671276 -8.16033219, 113.67141344 -8.16022524, 113.67150605 -8.16005386, 113.67153958 -8.15992869, 113.6716323 -8.15960914, 113.67168121 -8.15926294, 113.67165607 -8.15890036, 113.67155546 -8.15872897, 113.67139388 -8.15845466, 113.6713867 -8.15820901, 113.67132041 -8.15795704, 113.67117617 -8.15784072, 113.67098408 -8.15778028, 113.6708968 -8.15774861, 113.6706273 -8.1576508, 113.67052503 -8.15753689, 113.67048444 -8.15739533, 113.67049849 -8.1572185, 113.67056911 -8.15699208, 113.67067602 -8.15685106, 113.67074297 -8.15674297, 113.67072638 -8.1566206, 113.6706519 -8.15646248, 113.67049794 -8.15612525, 113.67037781 -8.15586781, 113.67019268 -8.155643, 113.66972833 -8.15503253, 113.6696791 -8.15483276, 113.66968803 -8.15463198, 113.66978542 -8.15412014, 113.66986211 -8.15383322, 113.6698418 -8.15358632, 113.66976707 -8.15333061, 113.66983486 -8.15326209, 113.67026708 -8.15289633, 113.67026211 -8.15276347, 113.67017422 -8.15246432, 113.66987597 -8.15155566, 113.66977427 -8.15128075, 113.66964191 -8.15116078, 113.66934211 -8.1508904, 113.66924255 -8.15070722, 113.66913962 -8.15036468, 113.66899615 -8.14988986, 113.66887433 -8.14964277, 113.66876308 -8.14945107, 113.66837247 -8.1493902, 113.66825711 -8.14925108, 113.66834213 -8.1490845, 113.6684701 -8.14888572, 113.66850306 -8.14877958, 113.66845722 -8.14864577, 113.66830974 -8.14858078, 113.66790468 -8.1486859, 113.66777818 -8.14871441, 113.66770619 -8.14867281, 113.66766602 -8.14847288, 113.66771872 -8.14823409, 113.66777416 -8.14769408, 113.66789882 -8.1472168, 113.66827615 -8.14681511, 113.66835311 -8.14667197, 113.66819697 -8.14650222, 113.66805639 -8.14638464, 113.66797632 -8.14624563, 113.6679416 -8.14613877, 113.66797541 -8.14606221, 113.66832766 -8.14596743, 113.66854752 -8.14591353, 113.66873239 -8.14579517, 113.66882682 -8.14569233, 113.66880633 -8.14557808, 113.6687197 -8.14548929, 113.66848692 -8.14543429, 113.66816308 -8.14546328, 113.66802414 -8.14546973, 113.66780782 -8.14525595, 113.66776699 -8.14515117, 113.66775677 -8.14502111, 113.66764994 -8.14484916, 113.66740808 -8.14466105, 113.66722505 -8.14461328, 113.66684295 -8.14451358, 113.66654221 -8.14441756, 113.66636013 -8.14430632, 113.66629701 -8.1442164, 113.66680118 -8.14320544, 113.66685877 -8.14306222, 113.66685152 -8.14294447, 113.6667228 -8.14281492, 113.66660127 -8.14274665, 113.66656398 -8.14271064, 113.66651744 -8.14265225, 113.66642749 -8.14235252, 113.66643246 -8.14222868, 113.66644241 -8.14197738, 113.66648444 -8.14175832, 113.66692836 -8.14125875, 113.66712647 -8.14105608, 113.66719583 -8.1409851, 113.66725997 -8.14088055, 113.66736908 -8.14070277, 113.667429 -8.14050435, 113.66743316 -8.14033377, 113.66738946 -8.14017378, 113.66722865 -8.13993801, 113.66685633 -8.13961878, 113.66619032 -8.13892066, 113.66593533 -8.13857108, 113.6658955 -8.13851649, 113.66553401 -8.13802716, 113.66523458 -8.13762172, 113.66513996 -8.13737661, 113.66520289 -8.13715863, 113.66538479 -8.13692359, 113.66579144 -8.13667057, 113.66595852 -8.13658507, 113.66647667 -8.13629863, 113.66685614 -8.13614844, 113.66728206 -8.13597984, 113.66817101 -8.13549696, 113.66836745 -8.13540818, 113.66868701 -8.13525181, 113.66893156 -8.13513562, 113.66990801 -8.13465062, 113.67072407 -8.13425677, 113.67145382 -8.13391488, 113.6718626 -8.13363654, 113.67188996 -8.13361791, 113.67218924 -8.13325313, 113.67235308 -8.1326035, 113.67253502 -8.1332347, 113.67257566 -8.13337565, 113.67287666 -8.13379615, 113.67301394 -8.13397031, 113.67309111 -8.13422849, 113.67320358 -8.13479653, 113.67326012 -8.1350163, 113.67334827 -8.13512076, 113.67336278 -8.13514248, 113.67346089 -8.13530808, 113.67365785 -8.13565291, 113.67380824 -8.13623063, 113.67400557 -8.13679764, 113.67410545 -8.13708142, 113.67416391 -8.13750715, 113.6741358 -8.13783239, 113.67406324 -8.13814714, 113.67374527 -8.13857559, 113.67354608 -8.13911432, 113.67328024 -8.13957666, 113.67318853 -8.13974119, 113.67318863 -8.14017382, 113.67305789 -8.14093305, 113.67301916 -8.1411898, 113.6731243 -8.14145975, 113.67344511 -8.14265402, 113.67358266 -8.14318975, 113.67403053 -8.14411735, 113.67434769 -8.14461997, 113.67450621 -8.14487033, 113.67453787 -8.14505692, 113.674156 -8.1460931, 113.67407955 -8.14624697, 113.67377406 -8.14647348, 113.67362639 -8.14658616, 113.67353942 -8.14672701, 113.67352427 -8.14686266, 113.67350897 -8.1469993, 113.67362818 -8.14763394, 113.67363975 -8.14772744, 113.67370938 -8.14786455, 113.67405812 -8.1482479, 113.67473444 -8.14907442, 113.67510042 -8.14948597, 113.67538132 -8.14980921, 113.67580796 -8.15044185, 113.67627963 -8.15133374, 113.67645079 -8.15173838, 113.67655727 -8.15201369, 113.67689735 -8.15230894, 113.67704378 -8.15243576, 113.6771639 -8.15263775, 113.67720382 -8.15284111, 113.67719278 -8.15305911, 113.67712741 -8.1532506, 113.67700727 -8.15343618, 113.67629427 -8.15389107, 113.67611679 -8.15401463, 113.6760038 -8.1541677, 113.67595912 -8.15432153, 113.67600654 -8.15475735, 113.67605363 -8.15536185, 113.67607754 -8.15576121, 113.67626636 -8.15647019, 113.67637306 -8.15677932, 113.67654862 -8.15709117, 113.67660121 -8.15715597, 113.67798438 -8.15739219, 113.678639 -8.1574116, 113.67895771 -8.15742, 113.67934872 -8.15753806, 113.67985889 -8.1578785, 113.68052642 -8.15826355, 113.68086655 -8.15848136, 113.68100743 -8.15859809, 113.68116339 -8.15891375, 113.6812417 -8.15923711, 113.68129588 -8.15963744, 113.6812926 -8.15975524, 113.68125235 -8.15986286, 113.68130727 -8.16002381, 113.68137971 -8.16059305, 113.68137379 -8.16081438, 113.68095898 -8.16166789, 113.68083309 -8.16193942, 113.68078289 -8.16218214, 113.68080246 -8.16256052, 113.68086207 -8.16278072, 113.68103423 -8.16301658, 113.68122385 -8.16322124, 113.68129411 -8.16335489, 113.68130807 -8.1635088, 113.68131567 -8.16359292, 113.68125792 -8.16384611, 113.68097303 -8.16431915, 113.68079652 -8.16461214, 113.68064727 -8.16489733, 113.68060786 -8.16499368, 113.68047977 -8.16519756, 113.68027472 -8.16554509, 113.68021194 -8.16564333, 113.68010228 -8.16581496, 113.67929074 -8.16649491, 113.67900999 -8.16675474, 113.67881435 -8.16701032, 113.67869477 -8.16735102, 113.67862421 -8.16756356, 113.67839714 -8.16792178, 113.67810303 -8.1682467, 113.67747452 -8.1688671, 113.67710194 -8.16926194, 113.6767777 -8.16975477, 113.67648752 -8.17014695, 113.67631547 -8.17035405, 113.67620985 -8.17090972, 113.67533366 -8.17223323, 113.67513528 -8.17255411, 113.67499948 -8.17293475, 113.675692 -8.1730687, 113.67688098 -8.17308335, 113.67807636 -8.1731041, 113.67834243 -8.17311096, 113.67894649 -8.1731265, 113.67921204 -8.1731219, 113.67983444 -8.17311109, 113.6803146 -8.17311522, 113.68077926 -8.17311923, 113.68110943 -8.17311118, 113.68182339 -8.17309377, 113.68247924 -8.17306089, 113.68263412 -8.17299472, 113.68363698 -8.17263181, 113.68415776 -8.17250844, 113.68411628 -8.17326163, 113.68424978 -8.1733723, 113.68456219 -8.17316539, 113.68478786 -8.17300941, 113.68500185 -8.17295121, 113.68540866 -8.17284163, 113.68551744 -8.17278482, 113.68567855 -8.17265247, 113.68573545 -8.17254058, 113.68576824 -8.17236344, 113.68584736 -8.17199853, 113.68596946 -8.17180599, 113.68607874 -8.17165549, 113.68637975 -8.17131518, 113.68662999 -8.17115627, 113.68698105 -8.17101878, 113.68740075 -8.17083761, 113.6876815 -8.17062306, 113.68847775 -8.16988115, 113.68871883 -8.16952858, 113.6887433 -8.16946959, 113.68880077 -8.16933111, 113.68882459 -8.16927363, 113.68902474 -8.168599, 113.68911931 -8.1678365, 113.68907081 -8.1675533, 113.68905071 -8.16747905, 113.6892248 -8.1675408, 113.6893351 -8.1675805, 113.68938144 -8.16761116, 113.68955048 -8.16768053, 113.69028248 -8.16796663, 113.69063333 -8.16810378, 113.69165965 -8.16845553, 113.69288554 -8.16889286, 113.69331359 -8.16901931, 113.69435427 -8.16937355, 113.6943795 -8.16941922, 113.69441653 -8.16963783, 113.6944476 -8.16979338, 113.6945466 -8.16975823, 113.69487596 -8.16959249, 113.69535339 -8.16933677, 113.69570671 -8.16918463, 113.69618497 -8.16897896, 113.69657533 -8.16876313, 113.69675261 -8.16868322, 113.69677897 -8.16868268, 113.69680514 -8.16866462, 113.69695604 -8.16861238, 113.69706863 -8.16859193, 113.6973133 -8.16854747, 113.69734642 -8.16853773, 113.69790639 -8.16837278, 113.69804161 -8.16824948, 113.69842808 -8.16794497, 113.69871081 -8.16781457, 113.69930544 -8.16814182, 113.69977588 -8.16844823, 113.69994549 -8.16862393, 113.70082222 -8.16953218, 113.70125245 -8.16998291, 113.7014153 -8.17027884, 113.70145616 -8.170504, 113.70153466 -8.17077387, 113.701832 -8.17089504, 113.70231058 -8.17090037, 113.70342673 -8.17088967, 113.70402739 -8.17089369, 113.70459131 -8.17092979, 113.70471725 -8.1709484, 113.70509997 -8.17100491, 113.70548538 -8.17116349, 113.70578571 -8.17148357, 113.70585213 -8.17155434, 113.70558581 -8.17157822, 113.70541468 -8.17171749, 113.70530584 -8.17204415, 113.70536181 -8.17258913, 113.70549409 -8.1728846, 113.70573782 -8.17314229, 113.70614877 -8.1733618, 113.70655963 -8.1735628, 113.706896 -8.17376427, 113.70704641 -8.17398555, 113.70701144 -8.1743192, 113.70677372 -8.17495052, 113.70644333 -8.17563807, 113.70614913 -8.1763071, 113.70578685 -8.17662683, 113.70521242 -8.17700845, 113.70481938 -8.17726795, 113.7045076 -8.17739213, 113.7039108 -8.17763668, 113.70306244 -8.17792946, 113.7019267 -8.17839036, 113.7010333 -8.17875899, 113.70023089 -8.1791119, 113.69983783 -8.1793714, 113.69956605 -8.17959989, 113.69876793 -8.1802252, 113.69807899 -8.18060336, 113.69776489 -8.18090037, 113.69745131 -8.18127599, 113.69707939 -8.18178964, 113.69668626 -8.18208715, 113.69647 -8.18224587, 113.69621372 -8.18232622, 113.69585824 -8.18234826, 113.69552241 -8.18235051, 113.69538424 -8.18237109, 113.69508899 -8.18253033, 113.69481344 -8.18268944, 113.69465541 -8.18269051, 113.69447694 -8.18259339, 113.69423774 -8.18228044, 113.69399962 -8.18212476, 113.69370277 -8.18204808, 113.69348547 -8.18204954, 113.69317028 -8.18218926, 113.69303319 -8.18236712, 113.69309575 -8.18285822, 113.69305914 -8.18329096, 113.69290242 -8.1834886, 113.69256789 -8.18368743, 113.69207015 -8.18401983, 113.69215159 -8.18430818, 113.69232368 -8.18491744, 113.69260613 -8.18536673, 113.69276672 -8.18548744, 113.69302249 -8.18584887, 113.69312498 -8.18599815, 113.69338021 -8.18617475, 113.69365769 -8.18652203, 113.69381475 -8.18671859, 113.69377651 -8.18682061, 113.69362335 -8.18722934, 113.6933512 -8.18795561, 113.6932076 -8.18826327, 113.6931637 -8.18832588, 113.69313996 -8.18834727, 113.69285928 -8.18902838, 113.69265758 -8.18947589, 113.6924071 -8.1899744, 113.69212696 -8.19065371, 113.69228588 -8.19073488, 113.69259979 -8.19086847, 113.69276662 -8.19093947, 113.69320436 -8.19113727, 113.6935444 -8.19130147, 113.69362729 -8.19132838, 113.69392788 -8.1913941, 113.69410376 -8.19143255, 113.69489567 -8.1916183, 113.69501842 -8.19164709, 113.69531956 -8.19171775, 113.69586489 -8.1917209, 113.69594983 -8.19172137, 113.69635856 -8.19166974, 113.69684882 -8.19163946, 113.69718704 -8.1916606, 113.6975503 -8.1916833, 113.69771033 -8.19168686, 113.69808571 -8.19169517, 113.69815884 -8.1916903, 113.69874962 -8.19165224, 113.69942197 -8.19166683, 113.7001235 -8.19171914, 113.70161105 -8.19183374, 113.70182485 -8.1926115, 113.70190774 -8.19318291, 113.70197255 -8.19383368, 113.7019688 -8.19439843, 113.70196609 -8.19480882, 113.70223136 -8.19487527, 113.70323482 -8.19513596, 113.70370145 -8.19525718, 113.7042204 -8.19525766, 113.70431037 -8.19524997, 113.7058113 -8.19515217, 113.70761086 -8.19539938, 113.70770626 -8.1953919, 113.70782607 -8.19541552, 113.70855515 -8.19555928, 113.70951257 -8.19562264, 113.70971287 -8.1956359))', 4326));

-- UPDATE sampah.kelurahan
-- SET luas = ST_Area(geom::geography)::numeric
-- WHERE id = 1;

-- Data Kelurahan
INSERT INTO sampah.kelurahan (id, kecamatan_id, nama, jumlah_penduduk, geom)
VALUES
    (1, 1, 'SEMPUSARI', 10476, ST_GeomFromText(
      'MULTIPOLYGON(((113.66944201 -8.1937983, 113.66922844 -8.19396222, 113.66909898 -8.19426203, 113.66882032 -8.19471232, 113.66859709 -8.19503145, 113.66829805 -8.19523896, 113.66747572 -8.19582365, 113.6672708 -8.19606791, 113.66706649 -8.1964056, 113.66703428 -8.19720929, 113.66696328 -8.19782639, 113.66669826 -8.19851479, 113.66661795 -8.19864222, 113.66644661 -8.19902406, 113.66625206 -8.19940604, 113.66602167 -8.19962676, 113.66575572 -8.19973233, 113.66548908 -8.1997341, 113.6651988 -8.1996668, 113.66480364 -8.19951943, 113.66452379 -8.19927904, 113.66429026 -8.19902679, 113.66399821 -8.19869416, 113.66375265 -8.19838432, 113.66362193 -8.19790064, 113.66354928 -8.1974397, 113.66349976 -8.19684242, 113.66341605 -8.19640864, 113.66326842 -8.1960879, 113.66304072 -8.19588028, 113.66276538 -8.19580168, 113.66242583 -8.19578782, 113.66211902 -8.1958381, 113.66178083 -8.1960334, 113.66154433 -8.19634139, 113.66142166 -8.1965328, 113.66133869 -8.19626638, 113.66120479 -8.19583647, 113.66098852 -8.19543657, 113.66081573 -8.19502499, 113.66068286 -8.19470848, 113.66065128 -8.19461566, 113.66045363 -8.19403463, 113.66019677 -8.19325548, 113.65992574 -8.19240812, 113.65965077 -8.19190991, 113.65956009 -8.19181476, 113.65934892 -8.19159313, 113.65895442 -8.19132224, 113.65835003 -8.19091307, 113.65742388 -8.19039334, 113.65651055 -8.18988572, 113.65599677 -8.18959904, 113.65589357 -8.18950549, 113.65570883 -8.18933801, 113.65546161 -8.18895132, 113.65537606 -8.18866512, 113.65533212 -8.18851813, 113.65529779 -8.18813873, 113.65517396 -8.18742493, 113.65510683 -8.18672841, 113.65493494 -8.18609679, 113.65467737 -8.18554205, 113.65438333 -8.18528741, 113.6540547 -8.18515204, 113.65363243 -8.18502517, 113.65316592 -8.18488069, 113.65261189 -8.18473834, 113.65241083 -8.18437038, 113.65248325 -8.18411431, 113.65275204 -8.18336082, 113.65286192 -8.18305269, 113.65295344 -8.18256922, 113.65303466 -8.18216905, 113.6530695 -8.18209248, 113.65316027 -8.18193232, 113.65328556 -8.18178193, 113.65339655 -8.18164878, 113.65367804 -8.18145365, 113.65423427 -8.18119485, 113.65447036 -8.18101988, 113.65456889 -8.1808316, 113.6546223 -8.18051191, 113.65473413 -8.17936094, 113.65474271 -8.17897889, 113.65483621 -8.17859446, 113.65508141 -8.17788891, 113.65522137 -8.17777778, 113.65559875 -8.17757246, 113.65582015 -8.17752604, 113.65639534 -8.17750003, 113.65652706 -8.17741032, 113.65685557 -8.17743066, 113.65781507 -8.17751199, 113.65804715 -8.17749736, 113.65845846 -8.17747141, 113.65944434 -8.1773664, 113.65981557 -8.17729263, 113.6605525 -8.17714619, 113.66172749 -8.17684334, 113.66283702 -8.17642363, 113.66348321 -8.17643219, 113.66383203 -8.1764368, 113.66392026 -8.17640211, 113.66420381 -8.17629062, 113.66451458 -8.17595269, 113.6648133 -8.17576811, 113.66507528 -8.17560245, 113.66568708 -8.17529458, 113.66665724 -8.17505904, 113.66786024 -8.17498779, 113.66852573 -8.17497613, 113.66850094 -8.17600522, 113.66855021 -8.17673955, 113.66861889 -8.17749833, 113.66865663 -8.17818192, 113.66849471 -8.1788369, 113.66830003 -8.17932669, 113.6680676 -8.1798086, 113.66781993 -8.18006438, 113.66770764 -8.18029811, 113.66767875 -8.18048604, 113.66761582 -8.18072982, 113.66761643 -8.18091271, 113.66767036 -8.18125846, 113.66772147 -8.18158596, 113.66773603 -8.1817969, 113.66789136 -8.18197982, 113.66814944 -8.1821265, 113.66820986 -8.18216084, 113.66841931 -8.18231328, 113.66843098 -8.18238616, 113.66844187 -8.18245416, 113.66838072 -8.18267329, 113.66823669 -8.18312105, 113.66828875 -8.18320579, 113.66839283 -8.18326568, 113.66868527 -8.18345445, 113.66873447 -8.18357843, 113.66876331 -8.18384154, 113.66878742 -8.18406072, 113.66875688 -8.18430435, 113.66871494 -8.184482, 113.66870634 -8.18473243, 113.6686714 -8.18521612, 113.66862317 -8.18546724, 113.66850528 -8.18608103, 113.6686598 -8.1863878, 113.66909938 -8.18693469, 113.66911669 -8.1870386, 113.66910016 -8.18733145, 113.66901716 -8.18750094, 113.66892699 -8.18774366, 113.66891077 -8.18778736, 113.66870115 -8.18865097, 113.66857208 -8.18904147, 113.66852138 -8.18919748, 113.66849675 -8.18927086, 113.66800675 -8.190731, 113.66814864 -8.19167959, 113.66817083 -8.19180719, 113.66817238 -8.19183621, 113.66838524 -8.19219585, 113.66871818 -8.1927612, 113.66938015 -8.19370969, 113.66944201 -8.1937983)))',
      4326
    )),
    (2, 1, 'TEGAL BESAR', 41851, ST_GeomFromText(
      'MULTIPOLYGON(((113.70855515 -8.19555928, 113.70951257 -8.19562264, 113.70971287 -8.1956359, 113.71028582 -8.19566556, 113.71055799 -8.19568456, 113.71101617 -8.19571653, 113.71166789 -8.19576805, 113.71232893 -8.19576985, 113.71227795 -8.19636951, 113.71217058 -8.19651316, 113.71217736 -8.1971353, 113.71221113 -8.19835598, 113.71223094 -8.19899026, 113.71224071 -8.19930266, 113.7122764 -8.19998744, 113.71223122 -8.20069288, 113.71221147 -8.20122297, 113.71211058 -8.20172777, 113.71192191 -8.2019968, 113.711757 -8.20228969, 113.7115605 -8.20248666, 113.71141638 -8.20255202, 113.71104105 -8.20254029, 113.71062685 -8.20246999, 113.71005227 -8.20230463, 113.70956047 -8.20223484, 113.70923791 -8.20219806, 113.70894845 -8.20209138, 113.70869717 -8.20197891, 113.70850353 -8.20194458, 113.70829378 -8.20198352, 113.70791669 -8.20233017, 113.70779446 -8.20245338, 113.70741011 -8.20257662, 113.70716139 -8.20260831, 113.70691586 -8.20259095, 113.70670416 -8.20252266, 113.70648393 -8.20236431, 113.70633352 -8.20217423, 113.70619246 -8.20185647, 113.70616679 -8.20181247, 113.70598467 -8.20189411, 113.70539995 -8.20216462, 113.7048011 -8.20256472, 113.70431892 -8.20289184, 113.70407086 -8.20307004, 113.70367485 -8.20340711, 113.7034896 -8.20347997, 113.70323916 -8.20369221, 113.70280146 -8.204192, 113.70278222 -8.20420893, 113.70247458 -8.20439426, 113.70222271 -8.20447846, 113.70154095 -8.20445981, 113.70122481 -8.20447767, 113.70113446 -8.20453055, 113.70107664 -8.20456442, 113.70101102 -8.2046786, 113.7009718 -8.20477, 113.7007799 -8.20506128, 113.70058852 -8.20515338, 113.70005014 -8.20540367, 113.69967435 -8.20577874, 113.69948972 -8.20592348, 113.69937474 -8.2062368, 113.69933276 -8.20644405, 113.69927258 -8.20671419, 113.69926251 -8.20674028, 113.69911973 -8.20692368, 113.69875208 -8.2072324, 113.6983911 -8.20730441, 113.69758408 -8.20741507, 113.69748996 -8.20734864, 113.69712546 -8.20773535, 113.69665262 -8.20773436, 113.69535267 -8.2095702, 113.69492555 -8.21018441, 113.69407433 -8.20977345, 113.69397486 -8.20973009, 113.69379117 -8.21001948, 113.69339102 -8.21057421, 113.69299833 -8.21107612, 113.69266934 -8.21164721, 113.6923387 -8.21218354, 113.69209897 -8.21247943, 113.69200321 -8.21256298, 113.69190908 -8.21264511, 113.69163039 -8.21278755, 113.69076393 -8.21303322, 113.69022159 -8.21316108, 113.68926252 -8.21338826, 113.68875836 -8.21353098, 113.68834755 -8.21369561, 113.68792296 -8.21389412, 113.68766405 -8.21396007, 113.68739644 -8.21397067, 113.68732575 -8.21397891, 113.68729035 -8.21397929, 113.68720028 -8.21399132, 113.68605231 -8.21411208, 113.68530139 -8.21412154, 113.6847538 -8.21416863, 113.68456147 -8.21421245, 113.6844991 -8.21400844, 113.68447928 -8.21366085, 113.68447555 -8.21310454, 113.68447328 -8.21242917, 113.68448785 -8.21174939, 113.68461981 -8.21101066, 113.68476748 -8.21014686, 113.68486392 -8.20923444, 113.6850227 -8.20831432, 113.68554397 -8.20622252, 113.68553142 -8.20537271, 113.68550978 -8.20465964, 113.68552152 -8.20355335, 113.68552174 -8.20341743, 113.68524506 -8.20338664, 113.68521803 -8.20337963, 113.68418911 -8.20302853, 113.68385477 -8.20285857, 113.6836015 -8.20272596, 113.68318274 -8.20261893, 113.68291868 -8.20258579, 113.68272933 -8.20261616, 113.68267365 -8.20264639, 113.68230996 -8.20318521, 113.68212531 -8.20344461, 113.68188711 -8.20366595, 113.68141178 -8.20393887, 113.68119781 -8.20400167, 113.68096577 -8.20406978, 113.680641 -8.20415639, 113.68040457 -8.20426978, 113.68034203 -8.20430661, 113.68018555 -8.20441459, 113.68008896 -8.20448122, 113.67998794 -8.20451421, 113.67954391 -8.20446108, 113.67921866 -8.20454887, 113.67901596 -8.20460838, 113.67871663 -8.20460492, 113.67847071 -8.20453377, 113.67810986 -8.20429291, 113.67763469 -8.20391099, 113.67656209 -8.20345548, 113.67640281 -8.203382, 113.67629278 -8.20326729, 113.6762093 -8.20303356, 113.67620668 -8.20262665, 113.67621168 -8.20240942, 113.67617247 -8.20211785, 113.67599046 -8.20174738, 113.67577513 -8.20150632, 113.67548126 -8.20129413, 113.67486697 -8.20103142, 113.67453482 -8.20089721, 113.674318 -8.20076194, 113.674195 -8.20063192, 113.67437986 -8.19979154, 113.67445846 -8.19943967, 113.67426352 -8.19903336, 113.67387861 -8.19860422, 113.67344152 -8.19823889, 113.67297283 -8.19788878, 113.67253527 -8.19753181, 113.67235018 -8.1974183, 113.67188276 -8.19734442, 113.67147506 -8.19734984, 113.67129707 -8.19738276, 113.67091786 -8.19765963, 113.67063645 -8.19790284, 113.67043575 -8.19794426, 113.67032389 -8.1979333, 113.67000998 -8.1978903, 113.66974873 -8.19789152, 113.66925709 -8.19804255, 113.66896736 -8.19819789, 113.66875111 -8.19830214, 113.66831161 -8.19838496, 113.6676253 -8.19838083, 113.66725074 -8.19837803, 113.66695767 -8.19845522, 113.66688861 -8.19847811, 113.66669826 -8.19851479, 113.66696328 -8.19782639, 113.66703428 -8.19720929, 113.66706649 -8.1964056, 113.6672708 -8.19606791, 113.66747572 -8.19582365, 113.66829805 -8.19523896, 113.66859709 -8.19503145, 113.66882032 -8.19471232, 113.66909898 -8.19426203, 113.66922844 -8.19396222, 113.66944201 -8.1937983, 113.66997639 -8.19349013, 113.6703885 -8.19333792, 113.67070771 -8.19333579, 113.6711775 -8.19338874, 113.67161061 -8.1935727, 113.67195072 -8.19388812, 113.67212045 -8.1939991, 113.67236456 -8.19399747, 113.67253319 -8.1939403, 113.6726824 -8.19378983, 113.67279331 -8.1935275, 113.67278639 -8.19321323, 113.67274325 -8.19271794, 113.67268085 -8.19232192, 113.67269811 -8.19192534, 113.67281566 -8.19162724, 113.67297342 -8.19138832, 113.6733106 -8.19116802, 113.67394591 -8.19084666, 113.67440328 -8.19072468, 113.67466224 -8.19072296, 113.67500139 -8.19080001, 113.67538201 -8.19111463, 113.67570228 -8.1913504, 113.67614092 -8.19140694, 113.67637944 -8.19132607, 113.6766376 -8.19120542, 113.67679589 -8.1910458, 113.67695339 -8.19076724, 113.67705086 -8.19044943, 113.67700746 -8.18991453, 113.67694239 -8.18912204, 113.67687801 -8.18842866, 113.67689447 -8.18791315, 113.67703205 -8.18763474, 113.67719006 -8.18743546, 113.6774447 -8.18735765, 113.67768928 -8.18735602, 113.6778648 -8.18747657, 113.67818194 -8.18787432, 113.67860436 -8.18834094, 113.67895586 -8.18865152, 113.67953366 -8.18883893, 113.68002248 -8.18878352, 113.68031856 -8.18864248, 113.68042256 -8.18852011, 113.68042047 -8.18820716, 113.68038169 -8.18763372, 113.68044889 -8.1872334, 113.68062209 -8.18700624, 113.68084781 -8.1867961, 113.68119604 -8.18661993, 113.68206863 -8.18647507, 113.68292421 -8.18639984, 113.68337844 -8.18639682, 113.68365842 -8.18646449, 113.68418444 -8.1866506, 113.68474524 -8.18666329, 113.68502503 -8.18657938, 113.68527141 -8.18643005, 113.68561473 -8.18598469, 113.6858113 -8.18578644, 113.68609131 -8.18573535, 113.6863059 -8.18576675, 113.68676939 -8.18602624, 113.68715021 -8.18625343, 113.68744728 -8.18628427, 113.68785911 -8.1862159, 113.68820441 -8.18606592, 113.68886183 -8.18573332, 113.68950377 -8.1855485, 113.69031057 -8.18536263, 113.69093611 -8.18519437, 113.69139651 -8.18499437, 113.69160968 -8.18481243, 113.69177271 -8.18453237, 113.69188603 -8.18421981, 113.69207015 -8.18401983, 113.69215159 -8.18430818, 113.69232368 -8.18491744, 113.69260613 -8.18536673, 113.69276672 -8.18548744, 113.69302249 -8.18584887, 113.69312498 -8.18599815, 113.69338021 -8.18617475, 113.69365769 -8.18652203, 113.69381475 -8.18671859, 113.69377651 -8.18682061, 113.69362335 -8.18722934, 113.6933512 -8.18795561, 113.6932076 -8.18826327, 113.6931637 -8.18832588, 113.69313996 -8.18834727, 113.69285928 -8.18902838, 113.69265758 -8.18947589, 113.6924071 -8.1899744, 113.69212696 -8.19065371, 113.69228588 -8.19073488, 113.69259979 -8.19086847, 113.69276662 -8.19093947, 113.69320436 -8.19113727, 113.6935444 -8.19130147, 113.69362729 -8.19132838, 113.69392788 -8.1913941, 113.69410376 -8.19143255, 113.69489567 -8.1916183, 113.69501842 -8.19164709, 113.69531956 -8.19171775, 113.69586489 -8.1917209, 113.69594983 -8.19172137, 113.69635856 -8.19166974, 113.69684882 -8.19163946, 113.69718704 -8.1916606, 113.6975503 -8.1916833, 113.69771033 -8.19168686, 113.69808571 -8.19169517, 113.69815884 -8.1916903, 113.69874962 -8.19165224, 113.69942197 -8.19166683, 113.7001235 -8.19171914, 113.70161105 -8.19183374, 113.70182485 -8.1926115, 113.70190774 -8.19318291, 113.70197255 -8.19383368, 113.7019688 -8.19439843, 113.70196609 -8.19480882, 113.70223136 -8.19487527, 113.70323482 -8.19513596, 113.70370145 -8.19525718, 113.7042204 -8.19525766, 113.70431037 -8.19524997, 113.7058113 -8.19515217, 113.70761086 -8.19539938, 113.70770626 -8.1953919, 113.70782607 -8.19541552, 113.70855515 -8.19555928)))',
      4326
    )),
    (3, 1, 'JEMBER KIDUL', 20734, ST_GeomFromText(
      'MULTIPOLYGON(((113.69677897 -8.16868268, 113.69675521 -8.16874532, 113.6967358 -8.16886046, 113.6966708 -8.16902644, 113.69659325 -8.16924514, 113.69657472 -8.16950984, 113.6966841 -8.17005441, 113.69672971 -8.17021755, 113.69658614 -8.17033987, 113.69640819 -8.17086723, 113.69638374 -8.171064, 113.69642632 -8.17136499, 113.69640686 -8.17153343, 113.69644708 -8.17153, 113.69656008 -8.17150137, 113.69679421 -8.17144204, 113.69674639 -8.17150885, 113.69648065 -8.1719364, 113.69590563 -8.17284232, 113.6956686 -8.17331644, 113.69525033 -8.17416702, 113.69537076 -8.17450849, 113.69546995 -8.17471542, 113.69546246 -8.17527602, 113.6954108 -8.17597144, 113.69532505 -8.17662226, 113.69523778 -8.17688465, 113.69449037 -8.17819339, 113.69441103 -8.17872682, 113.69416899 -8.17956795, 113.69393897 -8.18039013, 113.69378869 -8.181148, 113.69374399 -8.18160699, 113.69372292 -8.18183236, 113.69370277 -8.18204808, 113.69348547 -8.18204954, 113.69317028 -8.18218926, 113.69303319 -8.18236712, 113.69309575 -8.18285822, 113.69305914 -8.18329096, 113.69290242 -8.1834886, 113.69256789 -8.18368743, 113.69207015 -8.18401983, 113.69188603 -8.18421981, 113.69177271 -8.18453237, 113.69160968 -8.18481243, 113.69139651 -8.18499437, 113.69093611 -8.18519437, 113.69031057 -8.18536263, 113.68950377 -8.1855485, 113.68886183 -8.18573332, 113.68820441 -8.18606592, 113.68785911 -8.1862159, 113.68744728 -8.18628427, 113.68715021 -8.18625343, 113.68676939 -8.18602624, 113.6863059 -8.18576675, 113.68609131 -8.18573535, 113.6858113 -8.18578644, 113.68561473 -8.18598469, 113.68527141 -8.18643005, 113.68502503 -8.18657938, 113.68474524 -8.18666329, 113.68418444 -8.1866506, 113.68365842 -8.18646449, 113.68337844 -8.18639682, 113.68292421 -8.18639984, 113.68206863 -8.18647507, 113.68119604 -8.18661993, 113.68099661 -8.18636771, 113.68094852 -8.18631885, 113.68089708 -8.18618977, 113.6809243 -8.18596953, 113.68104997 -8.18572497, 113.68124058 -8.18551528, 113.68141997 -8.18541453, 113.68188558 -8.18518225, 113.6819906 -8.18507259, 113.68206843 -8.18499134, 113.68228952 -8.18468572, 113.68234074 -8.18459458, 113.68238388 -8.18446872, 113.68246467 -8.18398224, 113.68245647 -8.18358251, 113.68248344 -8.18335044, 113.68256988 -8.18311051, 113.68266909 -8.18276586, 113.68271558 -8.18245265, 113.68275725 -8.18217171, 113.68279881 -8.18210183, 113.68296205 -8.18195158, 113.6833372 -8.18167462, 113.68341232 -8.18163469, 113.68350642 -8.18157161, 113.68387261 -8.18132622, 113.68399 -8.18124049, 113.68434555 -8.18098188, 113.68454728 -8.18080868, 113.6847576 -8.1805393, 113.68484849 -8.18017906, 113.68497475 -8.17975695, 113.68509111 -8.17941149, 113.68546891 -8.17750588, 113.68544778 -8.17729341, 113.68535708 -8.17708133, 113.68526252 -8.17702444, 113.68517961 -8.17698549, 113.68487019 -8.17688935, 113.68431314 -8.17682279, 113.6839076 -8.17666981, 113.68377051 -8.17652748, 113.68374003 -8.17648156, 113.68371796 -8.17639512, 113.68371077 -8.17615977, 113.68369799 -8.17554239, 113.68367891 -8.17524204, 113.68370887 -8.174904, 113.68368171 -8.1747867, 113.68362954 -8.17456102, 113.68364074 -8.17447896, 113.68364655 -8.17443613, 113.68365461 -8.17440508, 113.68368085 -8.17430405, 113.68381613 -8.17397984, 113.68406356 -8.17358355, 113.68424978 -8.1733723, 113.68456219 -8.17316539, 113.68478786 -8.17300941, 113.68500185 -8.17295121, 113.68540866 -8.17284163, 113.68551744 -8.17278482, 113.68567855 -8.17265247, 113.68573545 -8.17254058, 113.68576824 -8.17236344, 113.68584736 -8.17199853, 113.68596946 -8.17180599, 113.68607874 -8.17165549, 113.68637975 -8.17131518, 113.68662999 -8.17115627, 113.68698105 -8.17101878, 113.68740075 -8.17083761, 113.6876815 -8.17062306, 113.68847775 -8.16988115, 113.68871883 -8.16952858, 113.6887433 -8.16946959, 113.68880077 -8.16933111, 113.68882459 -8.16927363, 113.68902474 -8.168599, 113.68911931 -8.1678365, 113.68907081 -8.1675533, 113.68905071 -8.16747905, 113.6892248 -8.1675408, 113.6893351 -8.1675805, 113.68938144 -8.16761116, 113.68955048 -8.16768053, 113.69028248 -8.16796663, 113.69063333 -8.16810378, 113.69165965 -8.16845553, 113.69288554 -8.16889286, 113.69331359 -8.16901931, 113.69435427 -8.16937355, 113.6943795 -8.16941922, 113.69441653 -8.16963783, 113.6944476 -8.16979338, 113.6945466 -8.16975823, 113.69487596 -8.16959249, 113.69535339 -8.16933677, 113.69570671 -8.16918463, 113.69618497 -8.16897896, 113.69657533 -8.16876313, 113.69675261 -8.16868322, 113.69677897 -8.16868268)))',
      4326
    )),
    (4, 1, 'KEPATIHAN', 16866, ST_GeomFromText(
      'MULTIPOLYGON(((113.70585213 -8.17155434, 113.70558581 -8.17157822, 113.70541468 -8.17171749, 113.70530584 -8.17204415, 113.70536181 -8.17258913, 113.70549409 -8.1728846, 113.70573782 -8.17314229, 113.70614877 -8.1733618, 113.70655963 -8.1735628, 113.706896 -8.17376427, 113.70704641 -8.17398555, 113.70701144 -8.1743192, 113.70677372 -8.17495052, 113.70644333 -8.17563807, 113.70614913 -8.1763071, 113.70578685 -8.17662683, 113.70521242 -8.17700845, 113.70481938 -8.17726795, 113.7045076 -8.17739213, 113.7039108 -8.17763668, 113.70306244 -8.17792946, 113.7019267 -8.17839036, 113.7010333 -8.17875899, 113.70023089 -8.1791119, 113.69983783 -8.1793714, 113.69956605 -8.17959989, 113.69876793 -8.1802252, 113.69807899 -8.18060336, 113.69776489 -8.18090037, 113.69745131 -8.18127599, 113.69707939 -8.18178964, 113.69668626 -8.18208715, 113.69647 -8.18224587, 113.69621372 -8.18232622, 113.69585824 -8.18234826, 113.69552241 -8.18235051, 113.69538424 -8.18237109, 113.69508899 -8.18253033, 113.69481344 -8.18268944, 113.69465541 -8.18269051, 113.69447694 -8.18259339, 113.69423774 -8.18228044, 113.69399962 -8.18212476, 113.69370277 -8.18204808, 113.69372292 -8.18183236, 113.69374399 -8.18160699, 113.69378869 -8.181148, 113.69393897 -8.18039013, 113.69416899 -8.17956795, 113.69441103 -8.17872682, 113.69449037 -8.17819339, 113.69523778 -8.17688465, 113.69532505 -8.17662226, 113.6954108 -8.17597144, 113.69546246 -8.17527602, 113.69546995 -8.17471542, 113.69537076 -8.17450849, 113.69525033 -8.17416702, 113.6956686 -8.17331644, 113.69590563 -8.17284232, 113.69648065 -8.1719364, 113.69674639 -8.17150885, 113.69679421 -8.17144204, 113.69656008 -8.17150137, 113.69644708 -8.17153, 113.69640686 -8.17153343, 113.69642632 -8.17136499, 113.69638374 -8.171064, 113.69640819 -8.17086723, 113.69658614 -8.17033987, 113.69672971 -8.17021755, 113.6966841 -8.17005441, 113.69657472 -8.16950984, 113.69659325 -8.16924514, 113.6966708 -8.16902644, 113.6967358 -8.16886046, 113.69675521 -8.16874532, 113.69677897 -8.16868268, 113.69680514 -8.16866462, 113.69695604 -8.16861238, 113.69706863 -8.16859193, 113.6973133 -8.16854747, 113.69734642 -8.16853773, 113.69790639 -8.16837278, 113.69804161 -8.16824948, 113.69842808 -8.16794497, 113.69871081 -8.16781457, 113.69930544 -8.16814182, 113.69977588 -8.16844823, 113.69994549 -8.16862393, 113.70082222 -8.16953218, 113.70125245 -8.16998291, 113.7014153 -8.17027884, 113.70145616 -8.170504, 113.70153466 -8.17077387, 113.701832 -8.17089504, 113.70231058 -8.17090037, 113.70342673 -8.17088967, 113.70402739 -8.17089369, 113.70459131 -8.17092979, 113.70471725 -8.1709484, 113.70509997 -8.17100491, 113.70548538 -8.17116349, 113.70578571 -8.17148357, 113.70585213 -8.17155434)))',
      4326
    )),
    (5, 1, 'KALIWATES', 13849, ST_GeomFromText(
      'MULTIPOLYGON(((113.68424978 -8.1733723, 113.68406356 -8.17358355, 113.68381613 -8.17397984, 113.68368085 -8.17430405, 113.68365461 -8.17440508, 113.68364655 -8.17443613, 113.68364074 -8.17447896, 113.68362954 -8.17456102, 113.68368171 -8.1747867, 113.68370887 -8.174904, 113.68367891 -8.17524204, 113.68369799 -8.17554239, 113.68371077 -8.17615977, 113.68371796 -8.17639512, 113.68374003 -8.17648156, 113.68377051 -8.17652748, 113.6839076 -8.17666981, 113.68431314 -8.17682279, 113.68487019 -8.17688935, 113.68517961 -8.17698549, 113.68526252 -8.17702444, 113.68535708 -8.17708133, 113.68544778 -8.17729341, 113.68546891 -8.17750588, 113.68509111 -8.17941149, 113.68497475 -8.17975695, 113.68484849 -8.18017906, 113.6847576 -8.1805393, 113.68454728 -8.18080868, 113.68434555 -8.18098188, 113.68399 -8.18124049, 113.68387261 -8.18132622, 113.68350642 -8.18157161, 113.68341232 -8.18163469, 113.6833372 -8.18167462, 113.68296205 -8.18195158, 113.68279881 -8.18210183, 113.68275725 -8.18217171, 113.68271558 -8.18245265, 113.68266909 -8.18276586, 113.68256988 -8.18311051, 113.68248344 -8.18335044, 113.68245647 -8.18358251, 113.68246467 -8.18398224, 113.68238388 -8.18446872, 113.68234074 -8.18459458, 113.68228952 -8.18468572, 113.68206843 -8.18499134, 113.6819906 -8.18507259, 113.68188558 -8.18518225, 113.68141997 -8.18541453, 113.68124058 -8.18551528, 113.68104997 -8.18572497, 113.6809243 -8.18596953, 113.68089708 -8.18618977, 113.68094852 -8.18631885, 113.68099661 -8.18636771, 113.68119604 -8.18661993, 113.68084781 -8.1867961, 113.68062209 -8.18700624, 113.68044889 -8.1872334, 113.68038169 -8.18763372, 113.68042047 -8.18820716, 113.68042256 -8.18852011, 113.68031856 -8.18864248, 113.68002248 -8.18878352, 113.67953366 -8.18883893, 113.67895586 -8.18865152, 113.67860436 -8.18834094, 113.67818194 -8.18787432, 113.6778648 -8.18747657, 113.67768928 -8.18735602, 113.6774447 -8.18735765, 113.67719006 -8.18743546, 113.67703205 -8.18763474, 113.67689447 -8.18791315, 113.67687801 -8.18842866, 113.67694239 -8.18912204, 113.67700746 -8.18991453, 113.67705086 -8.19044943, 113.67695339 -8.19076724, 113.67679589 -8.1910458, 113.6766376 -8.19120542, 113.67637944 -8.19132607, 113.67614092 -8.19140694, 113.67570228 -8.1913504, 113.67538201 -8.19111463, 113.67500139 -8.19080001, 113.67466224 -8.19072296, 113.67440328 -8.19072468, 113.67394591 -8.19084666, 113.6733106 -8.19116802, 113.67297342 -8.19138832, 113.67281566 -8.19162724, 113.67269811 -8.19192534, 113.67268085 -8.19232192, 113.67274325 -8.19271794, 113.67278639 -8.19321323, 113.67279331 -8.1935275, 113.6726824 -8.19378983, 113.67253319 -8.1939403, 113.67236456 -8.19399747, 113.67212045 -8.1939991, 113.67195072 -8.19388812, 113.67161061 -8.1935727, 113.6711775 -8.19338874, 113.67070771 -8.19333579, 113.6703885 -8.19333792, 113.66997639 -8.19349013, 113.66944201 -8.1937983, 113.66938015 -8.19370969, 113.66871818 -8.1927612, 113.66838524 -8.19219585, 113.66817238 -8.19183621, 113.66817083 -8.19180719, 113.66814864 -8.19167959, 113.66800675 -8.190731, 113.66849675 -8.18927086, 113.66852138 -8.18919748, 113.66857208 -8.18904147, 113.66870115 -8.18865097, 113.66891077 -8.18778736, 113.66892699 -8.18774366, 113.66901716 -8.18750094, 113.66910016 -8.18733145, 113.66911669 -8.1870386, 113.66909938 -8.18693469, 113.6686598 -8.1863878, 113.66850528 -8.18608103, 113.66862317 -8.18546724, 113.6686714 -8.18521612, 113.66870634 -8.18473243, 113.66871494 -8.184482, 113.66875688 -8.18430435, 113.66878742 -8.18406072, 113.66876331 -8.18384154, 113.66873447 -8.18357843, 113.66868527 -8.18345445, 113.66839283 -8.18326568, 113.66828875 -8.18320579, 113.66823669 -8.18312105, 113.66838072 -8.18267329, 113.66844187 -8.18245416, 113.66843098 -8.18238616, 113.66841931 -8.18231328, 113.66820986 -8.18216084, 113.66814944 -8.1821265, 113.66789136 -8.18197982, 113.66773603 -8.1817969, 113.66772147 -8.18158596, 113.66767036 -8.18125846, 113.66761643 -8.18091271, 113.66761582 -8.18072982, 113.66767875 -8.18048604, 113.66770764 -8.18029811, 113.66781993 -8.18006438, 113.6680676 -8.1798086, 113.66830003 -8.17932669, 113.66849471 -8.1788369, 113.66865663 -8.17818192, 113.66861889 -8.17749833, 113.66855021 -8.17673955, 113.66850094 -8.17600522, 113.66852573 -8.17497613, 113.66927281 -8.17482704, 113.67014276 -8.17458768, 113.67073714 -8.17433635, 113.67077893 -8.17429263, 113.67096894 -8.17409384, 113.67131302 -8.17388313, 113.67149897 -8.17376925, 113.67157455 -8.17373528, 113.67217341 -8.1734661, 113.67279954 -8.17323268, 113.67337688 -8.17305032, 113.67388116 -8.17295076, 113.67453036 -8.17293297, 113.67499948 -8.17293475, 113.675692 -8.1730687, 113.67688098 -8.17308335, 113.67807636 -8.1731041, 113.67834243 -8.17311096, 113.67894649 -8.1731265, 113.67921204 -8.1731219, 113.67983444 -8.17311109, 113.6803146 -8.17311522, 113.68077926 -8.17311923, 113.68110943 -8.17311118, 113.68182339 -8.17309377, 113.68247924 -8.17306089, 113.68263412 -8.17299472, 113.68363698 -8.17263181, 113.68415776 -8.17250844, 113.68411628 -8.17326163, 113.68424978 -8.1733723)))',
      4326
    )),
    (6, 1, 'KEBONAGUNG', 6904, ST_GeomFromText(
      'MULTIPOLYGON(((113.67689735 -8.15230894, 113.67704378 -8.15243576, 113.6771639 -8.15263775, 113.67720382 -8.15284111, 113.67719278 -8.15305911, 113.67712741 -8.1532506, 113.67700727 -8.15343618, 113.67629427 -8.15389107, 113.67611679 -8.15401463, 113.6760038 -8.1541677, 113.67595912 -8.15432153, 113.67600654 -8.15475735, 113.67605363 -8.15536185, 113.67607754 -8.15576121, 113.67626636 -8.15647019, 113.67637306 -8.15677932, 113.67654862 -8.15709117, 113.67660121 -8.15715597, 113.67798438 -8.15739219, 113.678639 -8.1574116, 113.67895771 -8.15742, 113.67934872 -8.15753806, 113.67985889 -8.1578785, 113.68052642 -8.15826355, 113.68086655 -8.15848136, 113.68100743 -8.15859809, 113.68116339 -8.15891375, 113.6812417 -8.15923711, 113.68129588 -8.15963744, 113.6812926 -8.15975524, 113.68125235 -8.15986286, 113.68130727 -8.16002381, 113.68137971 -8.16059305, 113.68137379 -8.16081438, 113.68095898 -8.16166789, 113.68083309 -8.16193942, 113.68078289 -8.16218214, 113.68080246 -8.16256052, 113.68086207 -8.16278072, 113.68103423 -8.16301658, 113.68122385 -8.16322124, 113.68129411 -8.16335489, 113.68130807 -8.1635088, 113.68131567 -8.16359292, 113.68125792 -8.16384611, 113.68097303 -8.16431915, 113.68079652 -8.16461214, 113.68064727 -8.16489733, 113.68060786 -8.16499368, 113.68047977 -8.16519756, 113.68027472 -8.16554509, 113.68021194 -8.16564333, 113.68010228 -8.16581496, 113.67929074 -8.16649491, 113.67900999 -8.16675474, 113.67881435 -8.16701032, 113.67869477 -8.16735102, 113.67862421 -8.16756356, 113.67839714 -8.16792178, 113.67810303 -8.1682467, 113.67747452 -8.1688671, 113.67710194 -8.16926194, 113.6767777 -8.16975477, 113.67648752 -8.17014695, 113.67631547 -8.17035405, 113.67620985 -8.17090972, 113.67533366 -8.17223323, 113.67513528 -8.17255411, 113.67499948 -8.17293475, 113.67453036 -8.17293297, 113.67388116 -8.17295076, 113.67337688 -8.17305032, 113.67279954 -8.17323268, 113.67217341 -8.1734661, 113.67157455 -8.17373528, 113.67149897 -8.17376925, 113.67131302 -8.17388313, 113.67096894 -8.17409384, 113.67105872 -8.17367403, 113.67101697 -8.1733528, 113.67089382 -8.17310922, 113.67089906 -8.17303317, 113.67043378 -8.17264692, 113.67037652 -8.17243158, 113.6702736 -8.17199434, 113.67013303 -8.1716721, 113.67002077 -8.17138022, 113.67002224 -8.17114866, 113.67011913 -8.17059408, 113.67021758 -8.16977802, 113.67020625 -8.1693784, 113.67013127 -8.16903094, 113.66990891 -8.16818077, 113.66964938 -8.16695648, 113.66956722 -8.16659588, 113.66963588 -8.16635627, 113.66967485 -8.16627186, 113.66982947 -8.16593684, 113.6701508 -8.16528074, 113.67023755 -8.16510359, 113.67026333 -8.16481271, 113.67021108 -8.16452666, 113.67013048 -8.16398897, 113.67007258 -8.16373047, 113.66994271 -8.16353508, 113.66973047 -8.16322728, 113.66987379 -8.16281565, 113.66986916 -8.16256996, 113.66981067 -8.16239094, 113.66968589 -8.16225629, 113.66944764 -8.16197839, 113.66943892 -8.1617985, 113.66948785 -8.16140372, 113.66959906 -8.16107014, 113.66972269 -8.16086706, 113.66977985 -8.16077312, 113.67005969 -8.16045684, 113.67019477 -8.16041167, 113.67035503 -8.16040189, 113.67048247 -8.16039414, 113.671276 -8.16033219, 113.67141344 -8.16022524, 113.67150605 -8.16005386, 113.67153958 -8.15992869, 113.6716323 -8.15960914, 113.67168121 -8.15926294, 113.67165607 -8.15890036, 113.67155546 -8.15872897, 113.67139388 -8.15845466, 113.6713867 -8.15820901, 113.67132041 -8.15795704, 113.67117617 -8.15784072, 113.67098408 -8.15778028, 113.6708968 -8.15774861, 113.6706273 -8.1576508, 113.67052503 -8.15753689, 113.67048444 -8.15739533, 113.67049849 -8.1572185, 113.67056911 -8.15699208, 113.67067602 -8.15685106, 113.67074297 -8.15674297, 113.67072638 -8.1566206, 113.6706519 -8.15646248, 113.67049794 -8.15612525, 113.67037781 -8.15586781, 113.67019268 -8.155643, 113.66972833 -8.15503253, 113.6696791 -8.15483276, 113.66968803 -8.15463198, 113.66978542 -8.15412014, 113.66986211 -8.15383322, 113.6698418 -8.15358632, 113.66976707 -8.15333061, 113.66983486 -8.15326209, 113.67026708 -8.15289633, 113.67026211 -8.15276347, 113.67017422 -8.15246432, 113.66987597 -8.15155566, 113.66977427 -8.15128075, 113.66964191 -8.15116078, 113.66934211 -8.1508904, 113.66924255 -8.15070722, 113.66913962 -8.15036468, 113.66899615 -8.14988986, 113.66887433 -8.14964277, 113.66876308 -8.14945107, 113.66837247 -8.1493902, 113.66825711 -8.14925108, 113.66834213 -8.1490845, 113.6684701 -8.14888572, 113.66850306 -8.14877958, 113.66845722 -8.14864577, 113.66830974 -8.14858078, 113.66790468 -8.1486859, 113.66777818 -8.14871441, 113.66770619 -8.14867281, 113.66766602 -8.14847288, 113.66771872 -8.14823409, 113.66777416 -8.14769408, 113.66789882 -8.1472168, 113.66827615 -8.14681511, 113.66835311 -8.14667197, 113.66819697 -8.14650222, 113.66805639 -8.14638464, 113.66797632 -8.14624563, 113.6679416 -8.14613877, 113.66797541 -8.14606221, 113.66832766 -8.14596743, 113.66854752 -8.14591353, 113.66873239 -8.14579517, 113.66882682 -8.14569233, 113.66880633 -8.14557808, 113.6687197 -8.14548929, 113.66848692 -8.14543429, 113.66816308 -8.14546328, 113.66802414 -8.14546973, 113.66780782 -8.14525595, 113.66776699 -8.14515117, 113.66775677 -8.14502111, 113.66764994 -8.14484916, 113.66740808 -8.14466105, 113.66722505 -8.14461328, 113.66684295 -8.14451358, 113.66654221 -8.14441756, 113.66636013 -8.14430632, 113.66629701 -8.1442164, 113.66680118 -8.14320544, 113.66685877 -8.14306222, 113.66685152 -8.14294447, 113.6667228 -8.14281492, 113.66660127 -8.14274665, 113.66656398 -8.14271064, 113.66651744 -8.14265225, 113.66642749 -8.14235252, 113.66643246 -8.14222868, 113.66644241 -8.14197738, 113.66648444 -8.14175832, 113.66692836 -8.14125875, 113.66712647 -8.14105608, 113.66719583 -8.1409851, 113.66725997 -8.14088055, 113.66736908 -8.14070277, 113.667429 -8.14050435, 113.66743316 -8.14033377, 113.66738946 -8.14017378, 113.66722865 -8.13993801, 113.66685633 -8.13961878, 113.66619032 -8.13892066, 113.66593533 -8.13857108, 113.6658955 -8.13851649, 113.66553401 -8.13802716, 113.66523458 -8.13762172, 113.66513996 -8.13737661, 113.66520289 -8.13715863, 113.66538479 -8.13692359, 113.66579144 -8.13667057, 113.66595852 -8.13658507, 113.66647667 -8.13629863, 113.66685614 -8.13614844, 113.66728206 -8.13597984, 113.66817101 -8.13549696, 113.66836745 -8.13540818, 113.66868701 -8.13525181, 113.66893156 -8.13513562, 113.66990801 -8.13465062, 113.67072407 -8.13425677, 113.67145382 -8.13391488, 113.6718626 -8.13363654, 113.67188996 -8.13361791, 113.67218924 -8.13325313, 113.67235308 -8.1326035, 113.67253502 -8.1332347, 113.67257566 -8.13337565, 113.67287666 -8.13379615, 113.67301394 -8.13397031, 113.67309111 -8.13422849, 113.67320358 -8.13479653, 113.67326012 -8.1350163, 113.67334827 -8.13512076, 113.67336278 -8.13514248, 113.67346089 -8.13530808, 113.67365785 -8.13565291, 113.67380824 -8.13623063, 113.67400557 -8.13679764, 113.67410545 -8.13708142, 113.67416391 -8.13750715, 113.6741358 -8.13783239, 113.67406324 -8.13814714, 113.67374527 -8.13857559, 113.67354608 -8.13911432, 113.67328024 -8.13957666, 113.67318853 -8.13974119, 113.67318863 -8.14017382, 113.67305789 -8.14093305, 113.67301916 -8.1411898, 113.6731243 -8.14145975, 113.67344511 -8.14265402, 113.67358266 -8.14318975, 113.67403053 -8.14411735, 113.67434769 -8.14461997, 113.67450621 -8.14487033, 113.67453787 -8.14505692, 113.674156 -8.1460931, 113.67407955 -8.14624697, 113.67377406 -8.14647348, 113.67362639 -8.14658616, 113.67353942 -8.14672701, 113.67352427 -8.14686266, 113.67350897 -8.1469993, 113.67362818 -8.14763394, 113.67363975 -8.14772744, 113.67370938 -8.14786455, 113.67405812 -8.1482479, 113.67473444 -8.14907442, 113.67510042 -8.14948597, 113.67538132 -8.14980921, 113.67580796 -8.15044185, 113.67627963 -8.15133374, 113.67645079 -8.15173838, 113.67655727 -8.15201369, 113.67689735 -8.15230894)))',
      4326
    )),
    (7, 1, 'MANGLI', 13514, ST_GeomFromText(
      'MULTIPOLYGON(((113.65241083 -8.18437038, 113.65261189 -8.18473834, 113.65316592 -8.18488069, 113.65363243 -8.18502517, 113.6540547 -8.18515204, 113.65438333 -8.18528741, 113.65467737 -8.18554205, 113.65493494 -8.18609679, 113.65510683 -8.18672841, 113.65517396 -8.18742493, 113.65529779 -8.18813873, 113.65533212 -8.18851813, 113.65537606 -8.18866512, 113.65546161 -8.18895132, 113.65570883 -8.18933801, 113.65589357 -8.18950549, 113.65599677 -8.18959904, 113.65651055 -8.18988572, 113.65742388 -8.19039334, 113.65835003 -8.19091307, 113.65895442 -8.19132224, 113.65934892 -8.19159313, 113.65956009 -8.19181476, 113.65965077 -8.19190991, 113.65992574 -8.19240812, 113.66019677 -8.19325548, 113.66045363 -8.19403463, 113.66065128 -8.19461566, 113.66068286 -8.19470848, 113.66081573 -8.19502499, 113.66098852 -8.19543657, 113.66120479 -8.19583647, 113.66133869 -8.19626638, 113.66142166 -8.1965328, 113.66128645 -8.19705006, 113.66112845 -8.19759801, 113.66069404 -8.1979065, 113.66025824 -8.1980059, 113.65970819 -8.19794518, 113.65936843 -8.19789918, 113.65912549 -8.19783643, 113.65886731 -8.19790248, 113.65873883 -8.19803201, 113.65862728 -8.19827403, 113.65850042 -8.19864485, 113.65840526 -8.19891893, 113.65821321 -8.19920974, 113.6578595 -8.19950162, 113.65752153 -8.19972906, 113.65703711 -8.19981267, 113.65655218 -8.19981587, 113.65617962 -8.19970573, 113.65577508 -8.19964405, 113.65537138 -8.19971106, 113.65504839 -8.19976145, 113.65485432 -8.19974663, 113.65470808 -8.19963499, 113.6546902 -8.19937774, 113.65472093 -8.19913625, 113.6548478 -8.19876546, 113.65511919 -8.1982489, 113.65540748 -8.19784487, 113.65543747 -8.19749076, 113.65537069 -8.19716951, 113.65517522 -8.19694559, 113.65496388 -8.19677004, 113.65470472 -8.19669131, 113.65443044 -8.19677353, 113.65422557 -8.19689147, 113.65384503 -8.19727516, 113.65344874 -8.19779155, 113.65325095 -8.19810775, 113.65300453 -8.19862313, 113.6527728 -8.19884011, 113.65264001 -8.19890729, 113.65250688 -8.19892474, 113.65232345 -8.19889279, 113.65220632 -8.19881071, 113.65200458 -8.19853029, 113.65181831 -8.19806743, 113.65163171 -8.19755491, 113.65149729 -8.19737347, 113.65131373 -8.19732497, 113.65111385 -8.19732629, 113.65089822 -8.19746027, 113.65079963 -8.19765982, 113.65071887 -8.19804153, 113.6507225 -8.19858843, 113.6508082 -8.19895249, 113.65094363 -8.19928306, 113.65119675 -8.1997786, 113.65134872 -8.20009249, 113.6514342 -8.2004234, 113.65138568 -8.20063916, 113.65122066 -8.2008723, 113.6507352 -8.20125914, 113.65054143 -8.20142368, 113.6501325 -8.20184679, 113.64978352 -8.20236155, 113.6495015 -8.20275453, 113.64927308 -8.20305272, 113.64904384 -8.20322954, 113.64885447 -8.20328472, 113.64865109 -8.20327257, 113.64843353 -8.20316612, 113.64829728 -8.20305913, 113.64811976 -8.20285801, 113.64795579 -8.20265678, 113.64775028 -8.20232097, 113.64754564 -8.20212004, 113.64726024 -8.20200053, 113.6470705 -8.20200179, 113.64680035 -8.20213841, 113.64642255 -8.20239713, 113.64617995 -8.20260102, 113.6460176 -8.20264255, 113.645882 -8.20262994, 113.64575974 -8.2025903, 113.64555546 -8.20244329, 113.6452829 -8.20221582, 113.64496877 -8.20185375, 113.64473686 -8.201626, 113.64447847 -8.20149283, 113.64431575 -8.20148044, 113.64407252 -8.20158991, 113.64391077 -8.20172583, 113.64360226 -8.20221336, 113.64321352 -8.20286327, 113.64282547 -8.2035185, 113.64260916 -8.20394612, 113.64209678 -8.20479195, 113.64181028 -8.20515066, 113.64157253 -8.20535045, 113.64125446 -8.20545165, 113.64084635 -8.20549397, 113.64047774 -8.20548649, 113.64035781 -8.2054278, 113.64023725 -8.20527001, 113.64003614 -8.20498389, 113.63982429 -8.20480049, 113.639674 -8.20478845, 113.63967325 -8.20469421, 113.63971671 -8.20424117, 113.63970083 -8.2041704, 113.63972077 -8.20374947, 113.63971847 -8.2036073, 113.63968335 -8.20345644, 113.63975572 -8.20317577, 113.63980532 -8.2029833, 113.63984426 -8.20280638, 113.63978819 -8.20264942, 113.63971097 -8.20249684, 113.63975467 -8.20225862, 113.63982506 -8.20189431, 113.63987433 -8.20167177, 113.63960914 -8.20116489, 113.63954308 -8.20103119, 113.63960025 -8.20046551, 113.63965133 -8.20018236, 113.63983961 -8.20007799, 113.63999022 -8.20001815, 113.6401195 -8.19989535, 113.64020616 -8.19968986, 113.64020403 -8.1994178, 113.64035515 -8.19909275, 113.64048779 -8.19886289, 113.64055375 -8.19858455, 113.6405693 -8.19842578, 113.64076886 -8.19811277, 113.64116708 -8.1981305, 113.641314 -8.19812806, 113.64143338 -8.19805793, 113.64153363 -8.19794602, 113.64160836 -8.19760113, 113.64172996 -8.19729048, 113.64181708 -8.19707069, 113.64183507 -8.19692816, 113.64199705 -8.19667354, 113.64227146 -8.19635325, 113.64238315 -8.19617376, 113.64245292 -8.19581856, 113.64248713 -8.19558176, 113.64256702 -8.19541281, 113.64271382 -8.19526608, 113.64313319 -8.19524041, 113.64327761 -8.19522936, 113.64353603 -8.19506896, 113.64381121 -8.19477338, 113.64401022 -8.19434652, 113.64411941 -8.19412666, 113.64423449 -8.19399177, 113.64445314 -8.19398816, 113.64456843 -8.19399349, 113.64467648 -8.19393511, 113.64472881 -8.19385495, 113.6445857 -8.19350424, 113.64450852 -8.19335135, 113.64451329 -8.19323746, 113.64453142 -8.19280165, 113.64449618 -8.19257446, 113.64445899 -8.1923347, 113.64443126 -8.19220822, 113.64441581 -8.1921378, 113.64435203 -8.19214514, 113.64410653 -8.1921303, 113.64381534 -8.1919651, 113.64326915 -8.19153642, 113.64242758 -8.19073544, 113.642111 -8.19043411, 113.64186516 -8.19011577, 113.64165486 -8.18972086, 113.64137651 -8.1890901, 113.641333 -8.18874615, 113.6413568 -8.18860129, 113.64136671 -8.18854092, 113.64138647 -8.18849672, 113.64149443 -8.18825492, 113.64174525 -8.18792005, 113.64191178 -8.18763731, 113.6419343 -8.18759186, 113.64210182 -8.18736139, 113.64230284 -8.18718501, 113.64242441 -8.18707833, 113.64287068 -8.18674675, 113.64303492 -8.1866247, 113.64311719 -8.1864681, 113.64307378 -8.18636818, 113.64295773 -8.18624003, 113.64283313 -8.18614716, 113.64275078 -8.18610431, 113.64269324 -8.18606824, 113.64233499 -8.18584474, 113.64187838 -8.18538347, 113.64183317 -8.18529197, 113.64174829 -8.18512032, 113.64172055 -8.18493456, 113.64175426 -8.18469827, 113.64184172 -8.18447259, 113.64200114 -8.18420122, 113.64209497 -8.18393606, 113.64203678 -8.18365483, 113.64194967 -8.18310899, 113.64179591 -8.1820143, 113.64175748 -8.18184091, 113.64178606 -8.18157745, 113.64198316 -8.18143743, 113.64229409 -8.18136132, 113.64301068 -8.18149974, 113.64438577 -8.18195877, 113.64577977 -8.18242357, 113.64591811 -8.18248199, 113.6475245 -8.18316036, 113.64897814 -8.18376078, 113.6502678 -8.18428269, 113.65031142 -8.18430184, 113.65094186 -8.18449844, 113.65152107 -8.18464643, 113.65206824 -8.18450846, 113.65241083 -8.18437038)))',
      4326
    ))
;

-- UPDATE sampah.kelurahan 
-- SET luas = ST_Area(geom::geography)::numeric;

-- Data Jaringan Jalan
DROP TABLE IF EXISTS temp_jalan;
CREATE TEMP TABLE temp_jalan (
    WKT text,
	fid integer,
    tipe text,
    nama varchar,
	panjang decimal
);

-- Import data from CSV to temp table
COPY temp_jalan (WKT, fid, tipe, nama, panjang) 
FROM 'D:\Study\UNEJ\SISTEM INFORMASI\MATKUL\MATERI\SEMESTER 6\SPATIAL BASIS DATA\webgis\src\sql\data\jalan.csv' 
DELIMITER ',' CSV HEADER;

-- Insert data from temp table to jalan table
INSERT INTO sampah.jalan (nama, tipe, geom)
SELECT 
    nama,
    tipe::sampah.tipe_jalan,
    ST_GeomFromText(WKT, 4326)
FROM temp_jalan;

DROP TABLE IF EXISTS temp_jalan;

-- Optional: Verify the data
SELECT * FROM sampah.jalan;

-- Data Lahan Potensial
DROP TABLE IF EXISTS temp_lahan_potensial;
CREATE TEMP TABLE temp_lahan_potensial (
    WKT text,
    fid integer,
    kelurahan_id integer,
    luas decimal
);

COPY temp_lahan_potensial 
FROM 'D:\Study\UNEJ\SISTEM INFORMASI\MATKUL\MATERI\SEMESTER 6\SPATIAL BASIS DATA\webgis\src\sql\data\lahan_potensial.csv' DELIMITER ',' CSV HEADER;

-- Create temp tables for processing
DROP TABLE IF EXISTS temp_processed_lahan;
CREATE TEMP TABLE temp_processed_lahan AS
WITH buffer_jalan AS (
    -- Create 5m buffer from roads
    SELECT ST_Union(ST_Buffer(geom::geography, 5)::geometry) AS buffer_geom
    FROM sampah.jalan
),
split_polygons AS (
    -- Split polygons and remove road buffer areas
    SELECT 
        row_number() OVER () as id,
        kelurahan_id,
        (ST_Dump(
            CASE 
                WHEN ST_Difference(ST_GeomFromText(WKT, 4326), bj.buffer_geom) IS NULL 
                THEN ST_GeomFromText(WKT, 4326)
                ELSE ST_Difference(ST_GeomFromText(WKT, 4326), bj.buffer_geom)
            END
        )).geom as geom_piece
    FROM temp_lahan_potensial
    CROSS JOIN buffer_jalan bj
),
merged_overlaps AS (
    -- Merge overlapping polygons
    SELECT 
        MIN(id) as id,
        kelurahan_id,
        ST_Union(geom_piece) as geom_piece
    FROM split_polygons sp1
    WHERE EXISTS (
        SELECT 1 
        FROM split_polygons sp2
        WHERE sp1.id != sp2.id
        AND ST_Overlaps(sp1.geom_piece, sp2.geom_piece)
    )
    GROUP BY kelurahan_id
),
non_overlapping AS (
    -- Get non-overlapping polygons
    SELECT 
        id,
        kelurahan_id,
        geom_piece
    FROM split_polygons sp
    WHERE NOT EXISTS (
        SELECT 1 
        FROM split_polygons sp2
        WHERE sp.id != sp2.id
        AND ST_Overlaps(sp.geom_piece, sp2.geom_piece)
    )
),
combined_polygons AS (
    -- Combine all processed polygons
    SELECT id, kelurahan_id, geom_piece FROM merged_overlaps
    UNION ALL
    SELECT id, kelurahan_id, geom_piece FROM non_overlapping
)
SELECT 
    id,
    kelurahan_id,
    ST_Multi(geom_piece)::geometry(MultiPolygon, 4326) as geom,
    ST_Area(geom_piece::geography) as luas,
    CASE 
        WHEN ST_Area(geom_piece::geography) < 100 THEN 'TIDAK_LAYAK'::sampah.status_lahan
        ELSE 'KOSONG'::sampah.status_lahan
    END as status
FROM combined_polygons;

-- Insert processed data into main table
INSERT INTO sampah.lahan_potensial (kelurahan_id, geom)
SELECT 
    kelurahan_id,
    geom
FROM temp_processed_lahan
WHERE status = 'KOSONG';

-- Optional: Drop temporary table
DROP TABLE temp_processed_lahan;
DROP TABLE temp_lahan_potensial;

SELECT * FROM sampah.lahan_potensial
ORDER BY id ASC;

-- Data TPA
INSERT INTO sampah.tpa (nama, geom)
VALUES
('TPA Pakusari', ST_GeomFromText(
  'MultiPolygon (((113.75946861 -8.16938603, 113.75948358 -8.16926424, 113.75951184 -8.16919182, 113.75961992 -8.16924449, 113.75969641 -8.16931855, 113.75982278 -8.16930374, 113.76003228 -8.1692988, 113.76018525 -8.16932678, 113.76034488 -8.16934324, 113.76052778 -8.1693202, 113.76067743 -8.16928234, 113.76081876 -8.16925766, 113.76093182 -8.16930539, 113.76112637 -8.16931362, 113.76130594 -8.16930374, 113.76149716 -8.16928728, 113.76156699 -8.16916384, 113.761562 -8.16901736, 113.76157697 -8.16888569, 113.76153872 -8.168782, 113.76147221 -8.16864375, 113.76144727 -8.16850056, 113.76146889 -8.16839687, 113.76149549 -8.1683047, 113.76151378 -8.16821911, 113.76157198 -8.1681039, 113.761705 -8.16806769, 113.76180975 -8.16808415, 113.76195441 -8.16812365, 113.76204586 -8.16817961, 113.76208244 -8.16830634, 113.7621822 -8.16841333, 113.76225204 -8.16846929, 113.76230358 -8.16855816, 113.76232686 -8.16867667, 113.76233518 -8.16880011, 113.7623385 -8.16889227, 113.76240667 -8.16906509, 113.76247651 -8.16921322, 113.76253304 -8.16935476, 113.76258625 -8.16946997, 113.76263613 -8.16958683, 113.76263946 -8.16970039, 113.76258625 -8.16981561, 113.76246653 -8.16981231, 113.76236511 -8.16978763, 113.76226368 -8.16986334, 113.76222045 -8.17000488, 113.76216558 -8.17014972, 113.76212567 -8.17027151, 113.76205584 -8.17044268, 113.76197935 -8.17062372, 113.76188457 -8.1707307, 113.7617449 -8.17078996, 113.76155701 -8.17083275, 113.76140238 -8.17082616, 113.7612943 -8.17078996, 113.76123777 -8.17070437, 113.76117791 -8.17065664, 113.76106484 -8.17070273, 113.76099501 -8.17080148, 113.76085035 -8.1708525, 113.76067077 -8.17091504, 113.76053443 -8.17091504, 113.76031661 -8.17087389, 113.76012373 -8.17081794, 113.7600672 -8.1707521, 113.76002064 -8.17064018, 113.75984772 -8.17063524, 113.75961327 -8.17059739, 113.75948025 -8.17053485, 113.75940876 -8.17046078, 113.75939878 -8.17012174, 113.75942039 -8.16988638, 113.75943702 -8.16960493, 113.7594603 -8.16941401, 113.75946861 -8.16938603)))', 4326)
);

-- Data TPS
-- Buat tabel sementara untuk menyimpan data dari CSV
DROP TABLE IF EXISTS temp_tps;
CREATE TEMP TABLE temp_tps (
    WKT text,
    id integer,
    kelurahan_id integer,
    nama varchar,
    golongan sampah.golongan_tps,
    status sampah.status_tps,
    kapasitas_jiwa integer,
    kapasitas_volume decimal,
    volume_terpakai decimal
);

-- Impor data dari file CSV ke tabel sementara
COPY temp_tps FROM 'D:\Study\UNEJ\SISTEM INFORMASI\MATKUL\MATERI\SEMESTER 6\SPATIAL BASIS DATA\webgis\src\sql\data\tps_baru.csv' DELIMITER ',' CSV HEADER;

-- Masukkan data dari tabel sementara ke tabel utama tanpa memasukkan nilai ke kolom luas_area
INSERT INTO sampah.tps (
    kelurahan_id, nama, golongan, status, kapasitas_jiwa, kapasitas_volume, volume_terpakai, geom
)
SELECT 
    kelurahan_id, 
    nama, 
    golongan, 
    status, 
    kapasitas_jiwa,
    kapasitas_volume, 
    volume_terpakai, 
    ST_GeomFromText(WKT, 4326)
FROM temp_tps;

DROP TABLE IF EXISTS temp_tps;

-- ========================================
-- FUNCTION ANALISIS SPASIAL PENGELOLAAN SAMPAH
-- ========================================

-- ========================================
-- 1. FUNCTION REKOMENDASI LOKASI TPS BARU
-- ========================================
-- 1. Function untuk generate grid points dalam polygon
CREATE OR REPLACE FUNCTION sampah.generate_grid_points(
    geom geometry,
    grid_spacing decimal
) RETURNS TABLE (
    point_geom geometry(Point, 4326)
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        (ST_Dump(ST_GeneratePoints(
            geom, 
            (ST_Area(geom::geography) / (grid_spacing * grid_spacing))::integer
        ))).geom::geometry(Point, 4326);
END;
$$ LANGUAGE plpgsql;

-- 2. Function untuk menghitung metrics per point
CREATE OR REPLACE FUNCTION sampah.hitung_metrics_point(
    point_geom geometry,
    p_radius_minimum decimal
) RETURNS TABLE (
    jarak_ke_jalan numeric,
    jarak_ke_tps_terdekat numeric,
    jarak_ke_pemukiman numeric,
    tps_dalam_radius integer,
    dalam_radius_tps boolean
) AS $$
BEGIN
    RETURN QUERY
    WITH area_pemukiman AS (
        SELECT k.id, 
            ST_Boundary(
                ST_Difference(
                    k.geom,
                    COALESCE(ST_Union(lp.geom), ST_GeomFromText('POLYGON EMPTY', 4326))
                )
            ) as geom_pemukiman
        FROM sampah.kelurahan k
        LEFT JOIN sampah.lahan_potensial lp ON k.id = lp.kelurahan_id
        WHERE ST_Contains(k.geom, point_geom)
        GROUP BY k.id, k.geom
    ),
    tps_existing_radius AS (
        SELECT EXISTS (
            SELECT 1 
            FROM sampah.tps t
            WHERE t.status = 'AKTIF' 
            AND (
                (t.golongan = 'TIPE_I' AND ST_DWithin(point_geom::geography, t.geom::geography, 250)) OR
                (t.golongan = 'TIPE_II' AND ST_DWithin(point_geom::geography, t.geom::geography, 500)) OR
                (t.golongan = 'TIPE_III' AND ST_DWithin(point_geom::geography, t.geom::geography, 1000))
            )
        ) as is_within_radius
    ),
    metrics AS (
        SELECT 
            -- Jarak ke jalan terdekat
            COALESCE(
                (
                    SELECT MIN(ST_Distance(point_geom::geography, j.geom::geography))::numeric
                    FROM sampah.jalan j
                    -- WHERE j.tipe IN ('primary', 'secondary', 'tertiary')
                ),
                0::numeric
            ) as jarak_jalan,
            -- Jarak ke TPS terdekat
            COALESCE(
                (
                    SELECT MIN(ST_Distance(point_geom::geography, t.geom::geography))::numeric
                    FROM sampah.tps t
                    WHERE t.status = 'AKTIF'
                ),
                0::numeric
            ) as jarak_tps,
            -- Jarak ke pemukiman
            COALESCE(
                (
                    SELECT MIN(ST_Distance(point_geom::geography, ap.geom_pemukiman::geography))::numeric
                    FROM area_pemukiman ap
                ),
                0::numeric
            ) as jarak_pemukiman,
            -- Jumlah TPS dalam radius
            (
                SELECT COALESCE(COUNT(*)::INTEGER, 0)
                FROM sampah.tps t
                WHERE ST_DWithin(point_geom::geography, t.geom::geography, p_radius_minimum)
                AND t.status = 'AKTIF'
            ) as count_tps
    )
    SELECT 
        m.jarak_jalan,
        m.jarak_tps,
        m.jarak_pemukiman,
        m.count_tps,
        NOT r.is_within_radius as outside_radius
    FROM metrics m
    CROSS JOIN tps_existing_radius r;
END;
$$ LANGUAGE plpgsql;

-- 3. Function untuk menghitung skor kelayakan
CREATE OR REPLACE FUNCTION sampah.hitung_skor_kelayakan(
    jarak_ke_jalan decimal,
    jarak_ke_tps decimal,
    jarak_ke_pemukiman decimal,
    luas_lahan decimal,
    kepadatan_penduduk decimal
) RETURNS decimal AS $$
BEGIN
    RETURN (
        -- Skor jarak ke jalan (30 poin)
        CASE 
            WHEN jarak_ke_jalan <= 50 THEN 30
            WHEN jarak_ke_jalan <= 100 THEN 20
            ELSE 10
        END +
        -- Skor jarak ke TPS terdekat (20 poin)
        CASE 
            WHEN jarak_ke_tps >= 1000 THEN 20
            WHEN jarak_ke_tps >= 500 THEN 15
            ELSE 10
        END +
        -- Skor jarak ke pemukiman (20 poin)
        CASE 
            WHEN jarak_ke_pemukiman <= 100 THEN 20
            WHEN jarak_ke_pemukiman <= 200 THEN 15
            ELSE 10
        END +
        -- Skor luas lahan (15 poin)
        CASE 
            WHEN luas_lahan >= 200 THEN 15
            WHEN luas_lahan >= 60 THEN 12
            ELSE 8
        END +
        -- Skor kepadatan penduduk (15 poin)
        CASE 
            WHEN kepadatan_penduduk >= 100 THEN 15
            WHEN kepadatan_penduduk >= 50 THEN 12
            ELSE 8
        END
    )::DECIMAL;
END;
$$ LANGUAGE plpgsql;

-- 4. Function utama untuk analisis rekomendasi TPS
CREATE OR REPLACE FUNCTION sampah.analisis_rekomendasi_tps_baru(
    p_kelurahan_id INTEGER DEFAULT NULL,
    p_min_luas DECIMAL DEFAULT 10,
    p_radius_minimum DECIMAL DEFAULT 500,
    p_jarak_maksimal_jalan DECIMAL DEFAULT 100,
    p_grid_spacing DECIMAL DEFAULT 50
) RETURNS TABLE (
    lahan_id INTEGER,
    point_id INTEGER,
    kelurahan_nama VARCHAR,
    luas_lahan DECIMAL,
    kepadatan_penduduk DECIMAL,
    jarak_ke_jalan DECIMAL,
    jarak_ke_tps_terdekat DECIMAL,
    jarak_ke_pemukiman DECIMAL,
    tps_dalam_radius INTEGER,
    golongan_rekomendasi sampah.golongan_tps,
    estimasi_kapasitas_jiwa INTEGER,
    estimasi_volume DECIMAL,
    estimasi_luas_minimal DECIMAL,
    skor_kelayakan DECIMAL,
    prioritas INTEGER,
    status_rekomendasi TEXT,
    geom GEOMETRY(POINT, 4326)
) AS $$
BEGIN
    RETURN QUERY
    WITH potential_points AS (
        SELECT 
            lp.id as lahan_id,
            k.nama as kelurahan_nama,
            lp.luas as luas_lahan,
            k.kepadatan_penduduk,
            points.point_geom as geom,
            ROW_NUMBER() OVER (
                PARTITION BY lp.id 
                ORDER BY points.point_geom
            )::INTEGER as point_id,
            metrics.*
        FROM sampah.lahan_potensial lp
        JOIN sampah.kelurahan k ON lp.kelurahan_id = k.id
        CROSS JOIN LATERAL sampah.generate_grid_points(lp.geom, p_grid_spacing) as points
        CROSS JOIN LATERAL sampah.hitung_metrics_point(points.point_geom, p_radius_minimum) as metrics
        WHERE lp.status = 'KOSONG'
        AND lp.luas >= p_min_luas
        AND (p_kelurahan_id IS NULL OR lp.kelurahan_id = p_kelurahan_id)
        AND metrics.dalam_radius_tps = true
    ),
    analyzed_points AS (
        -- Rest of the analysis remains the same...
        SELECT 
            pp.*,
            -- Penentuan golongan sesuai dengan kriteria yang ada
            CASE
                WHEN pp.luas_lahan >= 200 AND pp.kepadatan_penduduk >= 100 THEN 'TIPE_III'::sampah.golongan_tps
                WHEN pp.luas_lahan >= 60 AND pp.kepadatan_penduduk >= 50 THEN 'TIPE_II'::sampah.golongan_tps
                WHEN pp.luas_lahan >= 10 THEN 'TIPE_I'::sampah.golongan_tps
                ELSE NULL
            END as golongan_rekomendasi,
            -- Estimasi kapasitas jiwa
            CASE
                WHEN pp.luas_lahan >= 200 THEN 
                    LEAST(120000, (ROUND(pp.kepadatan_penduduk * PI() * POWER(1000,2) / 10000))::INTEGER)
                WHEN pp.luas_lahan >= 60 THEN 
                    LEAST(30000, (ROUND(pp.kepadatan_penduduk * PI() * POWER(500,2) / 10000))::INTEGER)
                ELSE 
                    LEAST(2500, (ROUND(pp.kepadatan_penduduk * PI() * POWER(250,2) / 10000))::INTEGER)
            END as estimasi_kapasitas_jiwa,
            -- Estimasi volume
            CASE
                WHEN pp.luas_lahan >= 200 THEN 1000.0::DECIMAL
                WHEN pp.luas_lahan >= 60 THEN 300.0::DECIMAL
                ELSE 100.0::DECIMAL
            END as estimasi_volume,
            -- Estimasi luas minimal
            CASE
                WHEN pp.luas_lahan >= 200 THEN 200.0::DECIMAL
                WHEN pp.luas_lahan >= 60 THEN 60.0::DECIMAL
                ELSE 10.0::DECIMAL
            END as estimasi_luas_minimal,
            -- Hitung skor kelayakan
            sampah.hitung_skor_kelayakan(
                pp.jarak_ke_jalan,
                pp.jarak_ke_tps_terdekat,
                pp.jarak_ke_pemukiman,
                pp.luas_lahan,
                pp.kepadatan_penduduk
            ) as skor_kelayakan
        FROM potential_points pp
        WHERE pp.jarak_ke_jalan <= p_jarak_maksimal_jalan
    ),
        filtered_points AS (
            -- Filter titik berdasarkan jarak minimum antar rekomendasi
            SELECT DISTINCT ON (ap.kelurahan_nama) ap.*
            FROM analyzed_points ap
            WHERE NOT EXISTS (
                -- Cek jarak dengan titik rekomendasi yang sudah terpilih
                SELECT 1
                FROM analyzed_points ap2
                WHERE ap.lahan_id != ap2.lahan_id
                AND (
                    -- Pastikan jarak minimum antar rekomendasi berdasarkan tipe
                    CASE 
                        WHEN ap.golongan_rekomendasi = 'TIPE_III' THEN 
                            ST_DWithin(ap.geom::geography, ap2.geom::geography, 1000)
                        WHEN ap.golongan_rekomendasi = 'TIPE_II' THEN 
                            ST_DWithin(ap.geom::geography, ap2.geom::geography, 500)
                        ELSE 
                            ST_DWithin(ap.geom::geography, ap2.geom::geography, 250)
                    END
                )
            )
            -- Pastikan di luar radius TPS existing
            AND NOT EXISTS (
                SELECT 1 
                FROM sampah.tps t
                WHERE t.status = 'AKTIF'
                AND ST_DWithin(ap.geom::geography, t.geom::geography, 1000)
            )
            ORDER BY 
                ap.kelurahan_nama,
                ap.skor_kelayakan DESC,
                ap.jarak_ke_jalan ASC
        )
    SELECT 
        fp.lahan_id,
        fp.point_id,
        fp.kelurahan_nama,
        fp.luas_lahan::NUMERIC,
        fp.kepadatan_penduduk::NUMERIC,
        fp.jarak_ke_jalan::NUMERIC,
        fp.jarak_ke_tps_terdekat::NUMERIC,
        fp.jarak_ke_pemukiman::NUMERIC,
        fp.tps_dalam_radius,
        fp.golongan_rekomendasi,
        fp.estimasi_kapasitas_jiwa,
        fp.estimasi_volume::NUMERIC,
        fp.estimasi_luas_minimal::NUMERIC,
        fp.skor_kelayakan::NUMERIC,
        ROW_NUMBER() OVER (
            PARTITION BY fp.kelurahan_nama 
            ORDER BY fp.skor_kelayakan DESC, fp.jarak_ke_jalan ASC
        )::INTEGER as prioritas,
        CASE
            WHEN fp.skor_kelayakan >= 80 THEN 'Sangat Direkomendasikan'
            WHEN fp.skor_kelayakan >= 60 THEN 'Direkomendasikan'
            ELSE 'Tidak Direkomendasikan'
        END as status_rekomendasi,
        fp.geom
    FROM filtered_points fp
    WHERE fp.golongan_rekomendasi IS NOT NULL
    ORDER BY fp.skor_kelayakan DESC, fp.kelurahan_nama, fp.point_id;
END;
$$ LANGUAGE plpgsql;

-- 5. Function untuk menyimpan hasil analisis
CREATE OR REPLACE FUNCTION sampah.simpan_rekomendasi_tps(
    p_kelurahan_id INTEGER DEFAULT NULL,
    p_min_luas DECIMAL DEFAULT 10,
    p_radius_minimum DECIMAL DEFAULT 500,
    p_jarak_maksimal_jalan DECIMAL DEFAULT 100,
    p_grid_spacing DECIMAL DEFAULT 50
) RETURNS void AS $$
BEGIN
    -- Hapus rekomendasi yang lama
    DELETE FROM sampah.rekomendasi_tps
    WHERE kelurahan_id = p_kelurahan_id OR p_kelurahan_id IS NULL;

    -- Insert hasil analisis
    INSERT INTO sampah.rekomendasi_tps (
        lahan_potensial_id,
        kelurahan_id,
        jarak_ke_jalan,
        jarak_ke_pemukiman,
        jarak_ke_tps_terdekat,
        golongan_rekomendasi,
        estimasi_jiwa_terlayani,
        estimasi_kapasitas_volume,
        estimasi_luas_area,
        skor_kelayakan,
        ranking,
        status_rekomendasi,
        geom
    )
    SELECT 
        a.lahan_id,
        lp.kelurahan_id,
        a.jarak_ke_jalan,
        a.jarak_ke_pemukiman,
        a.jarak_ke_tps_terdekat,
        a.golongan_rekomendasi,
        CASE 
            WHEN a.golongan_rekomendasi = 'TIPE_I' THEN LEAST(a.estimasi_kapasitas_jiwa, 2500)
            WHEN a.golongan_rekomendasi = 'TIPE_II' THEN LEAST(a.estimasi_kapasitas_jiwa, 30000)
            ELSE LEAST(a.estimasi_kapasitas_jiwa, 120000)
        END,
        CASE 
            WHEN a.golongan_rekomendasi = 'TIPE_I' THEN LEAST(a.estimasi_volume, 100)
            WHEN a.golongan_rekomendasi = 'TIPE_II' THEN LEAST(a.estimasi_volume, 300)
            ELSE LEAST(a.estimasi_volume, 1000)
        END,
        CASE 
            WHEN a.golongan_rekomendasi = 'TIPE_I' THEN LEAST(GREATEST(a.estimasi_luas_minimal, 10), 50)
            WHEN a.golongan_rekomendasi = 'TIPE_II' THEN LEAST(GREATEST(a.estimasi_luas_minimal, 60), 199)
            ELSE GREATEST(a.estimasi_luas_minimal, 200)
        END,
        a.skor_kelayakan,
        a.prioritas,
        CASE 
            WHEN a.skor_kelayakan >= 80 THEN 'SANGAT DIREKOMENDASIKAN'::sampah.status_rekomendasi
            WHEN a.skor_kelayakan >= 60 THEN 'DIREKOMENDASIKA'::sampah.status_rekomendasi
            ELSE 'TIDAK DIREKOMENDASIKAN'::sampah.status_rekomendasi
        END,
        a.geom
    FROM sampah.analisis_rekomendasi_tps_baru(
        p_kelurahan_id,
        p_min_luas,
        p_radius_minimum,
        p_jarak_maksimal_jalan,
        p_grid_spacing
    ) a
    JOIN sampah.lahan_potensial lp ON a.lahan_id = lp.id
    WHERE a.skor_kelayakan >= 60;

    RAISE NOTICE 'Berhasil menyimpan % rekomendasi TPS baru', 
        (SELECT count(*) FROM sampah.rekomendasi_tps WHERE 
            (kelurahan_id = p_kelurahan_id OR p_kelurahan_id IS NULL));
END;
$$ LANGUAGE plpgsql;

-- ========================================
-- 2. FUNCTION REKOMENDASI PENINGKATAN GOLONGAN TPS
-- ========================================

CREATE OR REPLACE FUNCTION sampah.rekomendasi_peningkatan_tps_dengan_lahan()
RETURNS TABLE (
    kelurahan_id INTEGER,
    kelurahan_nama VARCHAR,Add commentMore actions
    tps_id INTEGER,
    tps_nama VARCHAR,
    golongan_tps VARCHAR,
    kapasitas_jiwa INTEGER,
    rekomendasi TEXT,
    lahan_terdekat BOOLEAN
) AS $$
DECLARE
    kelurahan RECORD;
    tps RECORD;
    lahan_terdekat BOOLEAN;
BEGIN
    -- Loop untuk setiap kelurahan
    FOR kelurahan IN
        SELECT k.id AS kelurahan_id, k.nama AS kelurahan_nama
        FROM sampah.kelurahan k
    LOOP
        -- Loop untuk setiap TPS di kelurahan
        FOR tps IN
            SELECT t.id AS tps_id, t.nama AS tps_nama, t.golongan::VARCHAR AS golongan_tps, t.kapasitas_jiwa, t.geom
            FROM sampah.tps t
            WHERE t.kelurahan_id = kelurahan.kelurahan_id AND t.status = 'AKTIF'
        LOOP
            -- Cek apakah kapasitas TPS mencukupi
            IF tps.kapasitas_jiwa < (
                SELECT k.jumlah_penduduk
                FROM sampah.kelurahan k
                WHERE k.id = kelurahan.kelurahan_id
            ) THEN
                -- Cek apakah ada lahan kosong di sekitar TPS
                SELECT EXISTS (
                    SELECT 1
                    FROM sampah.lahan_potensial lp
                    WHERE lp.status = 'KOSONG'
                    AND ST_DWithin(tps.geom::geography, lp.geom::geography, 500)
                ) INTO lahan_terdekat;

                -- Berikan rekomendasi peningkatan
                RETURN QUERY SELECT 
                    kelurahan.kelurahan_id,
                    kelurahan.kelurahan_nama,
                    tps.tps_id,
                    tps.tps_nama,
                    tps.golongan_tps,
                    tps.kapasitas_jiwa,
                    CASE
                        WHEN tps.golongan_tps = 'TIPE_I' THEN 'Direkomendasikan untuk naik ke TIPE_II'
                        WHEN tps.golongan_tps = 'TIPE_II' THEN 'Direkomendasikan untuk naik ke TIPE_III'
                        ELSE 'Tidak ada rekomendasi peningkatan'
                    END,
                    lahan_terdekat;
            END IF;
        END LOOP;
    END LOOP;
END;
$$ LANGUAGE plpgsql;
SELECT * FROM sampah.rekomendasi_peningkatan_tps_dengan_lahan();

-- ========================================
-- FUNCTION JALUR EFEKTIF PENGANGKUTAN
-- ========================================

-- -- Function untuk mencari rute berdasarkan hierarki jalan
-- CREATE OR REPLACE FUNCTION sampah.cari_rute_tps_ke_tpa(
--     p_tps_geom geometry,
--     p_tpa_geom geometry
-- ) RETURNS geometry AS $$
-- DECLARE
--     route_result geometry;
--     current_type sampah.tipe_jalan;
--     current_path geometry;
--     last_point geometry;
--     next_point geometry;
--     temp_line geometry;
-- BEGIN
--     -- Cari jalan terdekat dari TPS (titik awal)
--     WITH closest_road AS (
--         SELECT j.geom, j.tipe
--         FROM sampah.jalan j
--         ORDER BY ST_Distance(j.geom, p_tps_geom)
--         LIMIT 1
--     )
--     SELECT ST_SetSRID(ST_MakeLine(p_tps_geom, ST_ClosestPoint(cr.geom, p_tps_geom)), 4326)
--     INTO route_result
--     FROM closest_road cr;
    
--     -- Set titik terakhir sebagai ujung rute saat ini
--     last_point := ST_EndPoint(route_result);
    
--     -- Loop through road types in order of priority
--     FOR current_type IN 
--         SELECT unnest(ARRAY['trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential']::sampah.tipe_jalan[])
--     LOOP
--         -- Cari segmen jalan berikutnya yang paling dekat dengan prioritas tipe jalan
--         WITH next_segment AS (
--             SELECT j.geom
--             FROM sampah.jalan j
--             WHERE j.tipe = current_type
--             AND ST_DWithin(j.geom, last_point, 100) -- Radius pencarian 100m
--             AND NOT ST_Equals(j.geom, COALESCE(current_path, ST_SetSRID(ST_GeomFromText('LINESTRING EMPTY'), 4326)))
--             ORDER BY ST_Distance(j.geom, last_point)
--             LIMIT 1
--         )
--         SELECT 
--             ST_SetSRID(
--                 ST_Union(
--                     COALESCE(route_result, ST_SetSRID(ST_GeomFromText('LINESTRING EMPTY'), 4326)),
--                     ST_ShortestLine(last_point, ns.geom)
--                 ),
--                 4326
--             )
--         INTO route_result
--         FROM next_segment ns
--         WHERE ns.geom IS NOT NULL;
        
--         -- Update last_point untuk iterasi berikutnya
--         IF route_result IS NOT NULL THEN
--             last_point := ST_EndPoint(route_result);
--         END IF;
--     END LOOP;

--     -- Hubungkan ke TPA (titik akhir) secara bertahap
--     WITH closest_road_to_tpa AS (
--         SELECT j.geom
--         FROM sampah.jalan j
--         ORDER BY ST_Distance(j.geom, p_tpa_geom)
--         LIMIT 1
--     )
--     SELECT 
--         -- Buat line ke jalan terdekat
--         ST_SetSRID(
--             ST_MakeLine(last_point, ST_ClosestPoint(cr.geom, p_tpa_geom)),
--             4326
--         )
--     INTO temp_line
--     FROM closest_road_to_tpa cr;

--     -- Gabungkan semua bagian rute
--     route_result := ST_SetSRID(
--         ST_Union(
--             route_result,
--             ST_Union(
--                 temp_line,
--                 ST_MakeLine(ST_EndPoint(temp_line), p_tpa_geom)
--             )
--         ),
--         4326
--     );

--     -- Pastikan rute terhubung dan valid
--     route_result := ST_SetSRID(ST_LineMerge(route_result), 4326);
    
--     -- Jika tidak ada rute yang ditemukan, gunakan garis lurus
--     IF route_result IS NULL THEN
--         route_result := ST_SetSRID(ST_MakeLine(p_tps_geom, p_tpa_geom), 4326);
--     END IF;

--     RETURN route_result;
-- END;
-- $$ LANGUAGE plpgsql;

-- -- Function untuk menyimpan detail rute
-- CREATE OR REPLACE FUNCTION sampah.simpan_detail_rute(
--     p_rute_id integer,
--     p_jalan_ids integer[],
--     p_urutan integer[]
-- ) RETURNS void AS $$
-- BEGIN
--     -- Simpan detail rute untuk setiap jalan yang dilalui
--     INSERT INTO sampah.detail_rute (
--         rute_angkut_id,
--         jalan_id,
--         urutan,
--         jarak,
--         tipe_jalan
--     )
--     SELECT 
--         p_rute_id,
--         j.id,
--         p_urutan[idx],
--         ST_Length(j.geom::geography), -- Jarak dalam meter
--         j.tipe
--     FROM unnest(p_jalan_ids) WITH ORDINALITY AS arr(jalan_id, idx)
--     JOIN sampah.jalan j ON j.id = arr.jalan_id;
-- END;
-- $$ LANGUAGE plpgsql;

-- -- Function untuk membuat dan menyimpan rute TPS
-- CREATE OR REPLACE FUNCTION sampah.generate_rute_tps() RETURNS void AS $$
-- DECLARE
--     tps_rec RECORD;
--     tpa_geom geometry;
--     route_geom geometry;
--     estimated_time interval;
--     jalan_ids integer[];
--     urutan_jalan integer[];
--     rute_id integer;
-- BEGIN
--     -- Hapus rute yang ada
--     DELETE FROM sampah.rute_angkut CASCADE;
    
--     -- Ambil lokasi TPA
--     SELECT geom INTO tpa_geom 
--     FROM sampah.tpa 
--     LIMIT 1;

--     -- Loop melalui setiap TPS aktif
--     FOR tps_rec IN 
--         SELECT id, geom 
--         FROM sampah.tps 
--         WHERE status = 'AKTIF'
--     LOOP
--         -- Cari rute
--         route_geom := sampah.cari_rute_tps_ke_tpa(
--             ST_Centroid(tps_rec.geom),
--             ST_Centroid(tpa_geom)
--         );

--         -- Estimasi waktu tempuh (asumsi kecepatan rata-rata 30 km/jam)
--         estimated_time := (ST_Length(route_geom::geography) / (30 * 1000 / 3600)) * interval '1 second';

--         -- Simpan rute utama
--         INSERT INTO sampah.rute_angkut (
--             tps_id,
--             tpa_id,
--             jarak_tempuh,
--             waktu_tempuh,
--             geom
--         ) VALUES (
--             tps_rec.id,
--             1,  -- Asumsi hanya ada 1 TPA
--             ST_Length(route_geom::geography),  -- Jarak dalam meter
--             estimated_time,
--             route_geom
--         ) RETURNING id INTO rute_id;

--         -- Dapatkan jalan yang dilalui
--         WITH ordered_roads AS (
--             SELECT 
--                 j.id,
--                 ROW_NUMBER() OVER (ORDER BY ST_Distance(j.geom, route_geom)) as urutan
--             FROM sampah.jalan j
--             WHERE ST_DWithin(j.geom, route_geom, 10)  -- 10 meter tolerance
--         )
--         SELECT 
--             array_agg(id ORDER BY urutan),
--             array_agg(urutan ORDER BY urutan)
--         INTO jalan_ids, urutan_jalan
--         FROM ordered_roads;

--         -- Simpan detail rute
--         IF jalan_ids IS NOT NULL THEN
--             PERFORM sampah.simpan_detail_rute(rute_id, jalan_ids, urutan_jalan);
--         END IF;

--     END LOOP;
-- END;
-- $$ LANGUAGE plpgsql;


-- Function untuk mencari jalan terdekat dari titik
-- CREATE OR REPLACE FUNCTION sampah.cari_jalan_terdekat(
--     p_point_geom geometry,
--     p_max_distance decimal DEFAULT 100 -- Maksimal jarak pencarian dalam meter
-- ) RETURNS TABLE (
--     jalan_id integer,
--     jalan_tipe sampah.tipe_jalan,
--     jalan_geom geometry,
--     jarak numeric,
--     connection_point geometry
-- ) AS $$
-- BEGIN
--     RETURN QUERY
--     WITH closest_road AS (
--         SELECT 
--             j.id,
--             j.tipe,
--             j.geom,
--             ST_Distance(j.geom::geography, p_point_geom::geography)::numeric as distance,
--             ST_ClosestPoint(j.geom, p_point_geom) as nearest_point
--         FROM sampah.jalan j
--         WHERE ST_DWithin(j.geom::geography, p_point_geom::geography, p_max_distance)
--         ORDER BY j.geom::geography <-> p_point_geom::geography
--         LIMIT 1
--     )
--     SELECT 
--         cr.id,
--         cr.tipe,
--         cr.geom,
--         cr.distance,
--         cr.nearest_point
--     FROM closest_road cr;
-- END;
-- $$ LANGUAGE plpgsql;

-- -- Tambahkan indeks spasial untuk optimasi query
-- CREATE INDEX IF NOT EXISTS idx_jalan_geom ON sampah.jalan USING GIST(geom);
-- CREATE INDEX IF NOT EXISTS idx_jalan_tipe ON sampah.jalan(tipe);


-- -- Function untuk testing koneksi titik-titik ke jalan terdekat
-- CREATE OR REPLACE FUNCTION sampah.cari_rute_jaringan_jalan(
--     p_start_point geometry,  -- Titik awal (TPS)
--     p_end_point geometry,    -- Titik akhir (TPA)
--     p_max_distance decimal DEFAULT 100  -- Radius pencarian jalan terdekat dalam meter
-- ) RETURNS geometry AS $$
-- DECLARE
--     start_road RECORD;
--     end_road RECORD;
--     route_geom geometry;
--     current_point geometry;
--     current_road RECORD;
--     visited_roads integer[] := ARRAY[]::integer[];
-- BEGIN
--     -- 1. Cari jalan terdekat dari TPS dan TPA
--     SELECT * INTO start_road FROM sampah.cari_jalan_terdekat(p_start_point, p_max_distance);
--     SELECT * INTO end_road FROM sampah.cari_jalan_terdekat(p_end_point, p_max_distance);

--     -- 2. Inisialisasi rute dengan koneksi ke jalan terdekat dari TPS
--     route_geom := ST_MakeLine(p_start_point, start_road.connection_point);
--     current_road := start_road;
--     visited_roads := array_append(visited_roads, start_road.jalan_id);

--     -- 3. Cari rute melalui jaringan jalan
--     WHILE current_road.jalan_id != end_road.jalan_id LOOP
--         -- Cari jalan yang terhubung dan belum dikunjungi
--         WITH RECURSIVE connected_roads AS (
--             -- Base case: jalan yang langsung terhubung
--             SELECT 
--                 j.id,
--                 j.geom,
--                 j.tipe,
--                 1 as depth,
--                 ARRAY[j.id] as path,
--                 ST_Distance(j.geom::geography, end_road.jalan_geom::geography) as distance_to_target
--             FROM sampah.jalan j
--             WHERE j.id != ALL(visited_roads)
--             AND ST_Intersects(j.geom, current_road.jalan_geom)
            
--             UNION ALL
            
--             -- Recursive case: jalan yang terhubung dengan jalan sebelumnya
--             SELECT 
--                 j.id,
--                 j.geom,
--                 j.tipe,
--                 cr.depth + 1,
--                 cr.path || j.id,
--                 ST_Distance(j.geom::geography, end_road.jalan_geom::geography)
--             FROM sampah.jalan j
--             JOIN connected_roads cr ON ST_Intersects(j.geom, cr.geom)
--             WHERE j.id != ALL(cr.path)
--             AND cr.depth < 5  -- Batasi kedalaman pencarian
--         )
--         SELECT 
--             j.id as jalan_id,
--             j.geom as jalan_geom,
--             j.tipe as jalan_tipe
--         INTO current_road
--         FROM connected_roads j
--         WHERE j.distance_to_target = (
--             SELECT MIN(distance_to_target)
--             FROM connected_roads
--             WHERE depth <= 5
--         )
--         ORDER BY 
--             -- Prioritaskan berdasarkan tipe jalan
--             CASE j.tipe 
--                 WHEN 'trunk' THEN 1
--                 WHEN 'primary' THEN 2
--                 WHEN 'secondary' THEN 3
--                 WHEN 'tertiary' THEN 4
--                 WHEN 'unclassified' THEN 5
--                 WHEN 'residential' THEN 6
--             END
--         LIMIT 1;

--         -- Keluar jika tidak ada jalan yang tersedia
--         EXIT WHEN current_road IS NULL;

--         -- Tambahkan jalan ke rute
--         route_geom := ST_Union(route_geom, current_road.jalan_geom);
--         visited_roads := array_append(visited_roads, current_road.jalan_id);
--     END LOOP;

--     -- 4. Hubungkan ke titik akhir
--     IF current_road IS NOT NULL THEN
--         route_geom := ST_Union(
--             route_geom,
--             ST_MakeLine(
--                 ST_EndPoint(current_road.jalan_geom),
--                 end_road.connection_point
--             )
--         );
        
--         route_geom := ST_Union(
--             route_geom,
--             ST_MakeLine(end_road.connection_point, p_end_point)
--         );
--     END IF;

--     -- 5. Pastikan rute valid dan terhubung
--     RETURN ST_SetSRID(ST_LineMerge(route_geom), 4326);
-- END;
-- $$ LANGUAGE plpgsql;

-- -- Test untuk satu TPS
-- SELECT 
--     t.id as tps_id,
--     t.nama as tps_nama,
--     ST_Length(
--         sampah.cari_rute_jaringan_jalan(
--             ST_Centroid(t.geom),
--             ST_Centroid(tpa.geom)
--         )::geography
--     ) as jarak_meter,
--     sampah.cari_rute_jaringan_jalan(
--         ST_Centroid(t.geom),
--         ST_Centroid(tpa.geom)
--     ) as rute_geom
-- FROM sampah.tps t
-- CROSS JOIN sampah.tpa tpa
-- WHERE t.status = 'AKTIF'
-- AND t.id = 1;

-- ========================================
-- 4. FUNCTION ANALISIS TPS TIAP KELURAHAN
-- ========================================

-- Function untuk mengevaluasi apakah TPS di setiap kelurahan telah mencukupi
CREATE OR REPLACE FUNCTION sampah.cek_kecukupan_tps()
RETURNS TABLE (
    kelurahan_id INTEGER,
    kelurahan_nama VARCHAR,
    jumlah_penduduk INTEGER,
    total_kapasitas_tps INTEGER,
    status_kecukupan VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        k.id AS kelurahan_id,
        k.nama AS kelurahan_nama,
        k.jumlah_penduduk,
        COALESCE(CAST(SUM(t.kapasitas_jiwa) AS INTEGER), 0) AS total_kapasitas_tps,
        CAST(
            CASE 
                WHEN COALESCE(CAST(SUM(t.kapasitas_jiwa) AS INTEGER), 0) >= k.jumlah_penduduk THEN 'CUKUP'
                ELSE 'TIDAK CUKUP'
            END AS VARCHAR
        ) AS status_kecukupan
    FROM sampah.kelurahan k
    LEFT JOIN sampah.tps t ON k.id = t.kelurahan_id AND t.status = 'AKTIF'
    GROUP BY k.id, k.nama, k.jumlah_penduduk
    ORDER BY k.nama;
END;
$$ LANGUAGE plpgsql;


-- ========================================
-- INDEX UNTUK OPTIMASI PERFORMA
-- ========================================


-- ========================================
-- PENGGUNAAN FUNCTION
-- ========================================

-- ========================================
-- 1. RUN FUNCTION REKOMENDASI LOKASI TPS BARU
-- ========================================

-- 1. Analisis dengan grid 50 meter dan tampilkan hasil
SELECT * FROM sampah.analisis_rekomendasi_tps_baru(
    p_grid_spacing := 50
);

-- 2. Analisis dan simpan hasil ke tabel
SELECT sampah.simpan_rekomendasi_tps();

-- ========================================
-- 2. RUN FUNCTION REKOMENDASI PENINGKATAN GOLONGAN TPS
-- ========================================

SELECT * FROM sampah.rekomendasi_peningkatan_tps_dengan_lahan();

-- ========================================
-- 3. RUN FUNCTION ANALISIS JALUR EFEKTIF PENGANGKUTAN
-- ========================================

-- Generate dan simpan rute
SELECT sampah.generate_rute_tps();

-- Lihat hasil rute utama
SELECT 
    ra.id,
    t.nama as tps_nama,
    ra.jarak_tempuh as jarak_meter,
    ra.waktu_tempuh
FROM sampah.rute_angkut ra
JOIN sampah.tps t ON ra.tps_id = t.id
ORDER BY ra.jarak_tempuh;

-- Lihat detail rute
SELECT 
    dr.rute_angkut_id,
    dr.urutan,
    j.nama as nama_jalan,
    dr.tipe_jalan,
    dr.jarak as jarak_meter
FROM sampah.detail_rute dr
JOIN sampah.jalan j ON dr.jalan_id = j.id
ORDER BY dr.rute_angkut_id, dr.urutan;


-- ========================================
-- 4. RUN FUNCTION ANALISIS KECUKUPAN TPS TERHADAP JUMLAH PENDUDUK
-- ========================================

-- Jalankan fungsi untuk mengevaluasi kecukupan TPS
SELECT * FROM sampah.cek_kecukupan_tps();


-- /*
SELECT * FROM sampah.kecamatan;
SELECT * FROM sampah.kelurahan;
SELECT * FROM sampah.jalan;
SELECT * FROM sampah.tpa;
SELECT * FROM sampah.tps;
SELECT * FROM sampah.lahan_potensial;
SELECT * FROM sampah.rekomendasi_tps;
SELECT * FROM sampah.detail_rute;
SELECT * FROM sampah.rute_angkut;
-- */